Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement_list statement
Rule 3     statement_list -> statement
Rule 4     statement -> assignment
Rule 5     statement -> if_statement
Rule 6     statement -> for_statement
Rule 7     statement -> while_statement
Rule 8     statement -> print_statement
Rule 9     statement -> function_def
Rule 10    statement -> function_call
Rule 11    statement -> return_statement
Rule 12    statement -> break_statement
Rule 13    break_statement -> BREAK
Rule 14    assignment -> ID ASSIGN expression
Rule 15    assignment -> ID PLUSEQUALS expression
Rule 16    assignment -> ID MINUSEQUALS expression
Rule 17    if_statement -> IF condition COLON statement elif_list_opt ELSE statement
Rule 18    if_statement -> IF condition COLON statement elif_list_opt
Rule 19    elif_list_opt -> elif_list
Rule 20    elif_list_opt -> empty
Rule 21    elif_list -> elif_list ELIF condition COLON statement
Rule 22    elif_list -> ELIF condition COLON statement
Rule 23    for_statement -> FOR ID IN range statement
Rule 24    while_statement -> WHILE condition statement
Rule 25    range -> RANGE LPAREN expression COMMA expression RPAREN
Rule 26    print_statement -> PRINT LPAREN expression RPAREN
Rule 27    function_def -> DEF ID LPAREN param_list RPAREN COLON statement_list
Rule 28    function_call -> ID LPAREN arg_list RPAREN
Rule 29    return_statement -> RETURN expression
Rule 30    param_list -> param_list COMMA ID
Rule 31    param_list -> ID
Rule 32    param_list -> empty
Rule 33    arg_list -> arg_list COMMA expression
Rule 34    arg_list -> expression
Rule 35    arg_list -> empty
Rule 36    condition -> expression EQUALS expression
Rule 37    condition -> expression LT expression
Rule 38    condition -> expression GT expression
Rule 39    condition -> expression LE expression
Rule 40    condition -> expression GE
Rule 41    expression -> MINUS expression
Rule 42    expression -> expression PLUS expression
Rule 43    expression -> expression MINUS expression
Rule 44    expression -> expression MULTIPLY expression
Rule 45    expression -> expression DIVIDE expression
Rule 46    expression -> expression MODULO expression
Rule 47    expression -> expression OR expression
Rule 48    expression -> expression AND expression
Rule 49    expression -> NOT expression
Rule 50    expression -> LPAREN expression RPAREN
Rule 51    expression -> ID
Rule 52    expression -> TRUE
Rule 53    expression -> FALSE
Rule 54    expression -> NUMBER
Rule 55    expression -> FLOAT
Rule 56    expression -> STRING
Rule 57    empty -> <empty>

Terminals, with rules where they appear

AND                  : 48
ASSIGN               : 14
BREAK                : 13
COLON                : 17 18 21 22 27
COMMA                : 25 30 33
DEF                  : 27
DIVIDE               : 45
ELIF                 : 21 22
ELSE                 : 17
EQUALS               : 36
FALSE                : 53
FLOAT                : 55
FOR                  : 23
GE                   : 40
GT                   : 38
ID                   : 14 15 16 23 27 28 30 31 51
IF                   : 17 18
IN                   : 23
LE                   : 39
LPAREN               : 25 26 27 28 50
LT                   : 37
MINUS                : 41 43
MINUSEQUALS          : 16
MODULO               : 46
MULTIPLY             : 44
NOT                  : 49
NUMBER               : 54
OR                   : 47
PLUS                 : 42
PLUSEQUALS           : 15
PRINT                : 26
RANGE                : 25
RETURN               : 29
RPAREN               : 25 26 27 28 50
STRING               : 56
TRUE                 : 52
WHILE                : 24
error                : 

Nonterminals, with rules where they appear

arg_list             : 28 33
assignment           : 4
break_statement      : 12
condition            : 17 18 21 22 24
elif_list            : 19 21
elif_list_opt        : 17 18
empty                : 20 32 35
expression           : 14 15 16 25 25 26 29 33 34 36 36 37 37 38 38 39 39 40 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 50
for_statement        : 6
function_call        : 10
function_def         : 9
if_statement         : 5
param_list           : 27 30
print_statement      : 8
program              : 0
range                : 23
return_statement     : 11
statement            : 2 3 17 17 18 21 22 23 24
statement_list       : 1 2 27
while_statement      : 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . for_statement
    (7) statement -> . while_statement
    (8) statement -> . print_statement
    (9) statement -> . function_def
    (10) statement -> . function_call
    (11) statement -> . return_statement
    (12) statement -> . break_statement
    (14) assignment -> . ID ASSIGN expression
    (15) assignment -> . ID PLUSEQUALS expression
    (16) assignment -> . ID MINUSEQUALS expression
    (17) if_statement -> . IF condition COLON statement elif_list_opt ELSE statement
    (18) if_statement -> . IF condition COLON statement elif_list_opt
    (23) for_statement -> . FOR ID IN range statement
    (24) while_statement -> . WHILE condition statement
    (26) print_statement -> . PRINT LPAREN expression RPAREN
    (27) function_def -> . DEF ID LPAREN param_list RPAREN COLON statement_list
    (28) function_call -> . ID LPAREN arg_list RPAREN
    (29) return_statement -> . RETURN expression
    (13) break_statement -> . BREAK

    ID              shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 17
    DEF             shift and go to state 18
    RETURN          shift and go to state 19
    BREAK           shift and go to state 20

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    for_statement                  shift and go to state 6
    while_statement                shift and go to state 7
    print_statement                shift and go to state 8
    function_def                   shift and go to state 9
    function_call                  shift and go to state 10
    return_statement               shift and go to state 11
    break_statement                shift and go to state 12

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . for_statement
    (7) statement -> . while_statement
    (8) statement -> . print_statement
    (9) statement -> . function_def
    (10) statement -> . function_call
    (11) statement -> . return_statement
    (12) statement -> . break_statement
    (14) assignment -> . ID ASSIGN expression
    (15) assignment -> . ID PLUSEQUALS expression
    (16) assignment -> . ID MINUSEQUALS expression
    (17) if_statement -> . IF condition COLON statement elif_list_opt ELSE statement
    (18) if_statement -> . IF condition COLON statement elif_list_opt
    (23) for_statement -> . FOR ID IN range statement
    (24) while_statement -> . WHILE condition statement
    (26) print_statement -> . PRINT LPAREN expression RPAREN
    (27) function_def -> . DEF ID LPAREN param_list RPAREN COLON statement_list
    (28) function_call -> . ID LPAREN arg_list RPAREN
    (29) return_statement -> . RETURN expression
    (13) break_statement -> . BREAK

    $end            reduce using rule 1 (program -> statement_list .)
    ID              shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 17
    DEF             shift and go to state 18
    RETURN          shift and go to state 19
    BREAK           shift and go to state 20

    statement                      shift and go to state 21
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    for_statement                  shift and go to state 6
    while_statement                shift and go to state 7
    print_statement                shift and go to state 8
    function_def                   shift and go to state 9
    function_call                  shift and go to state 10
    return_statement               shift and go to state 11
    break_statement                shift and go to state 12

state 3

    (3) statement_list -> statement .

    ID              reduce using rule 3 (statement_list -> statement .)
    IF              reduce using rule 3 (statement_list -> statement .)
    FOR             reduce using rule 3 (statement_list -> statement .)
    WHILE           reduce using rule 3 (statement_list -> statement .)
    PRINT           reduce using rule 3 (statement_list -> statement .)
    DEF             reduce using rule 3 (statement_list -> statement .)
    RETURN          reduce using rule 3 (statement_list -> statement .)
    BREAK           reduce using rule 3 (statement_list -> statement .)
    $end            reduce using rule 3 (statement_list -> statement .)
    ELIF            reduce using rule 3 (statement_list -> statement .)
    ELSE            reduce using rule 3 (statement_list -> statement .)


state 4

    (4) statement -> assignment .

    ID              reduce using rule 4 (statement -> assignment .)
    IF              reduce using rule 4 (statement -> assignment .)
    FOR             reduce using rule 4 (statement -> assignment .)
    WHILE           reduce using rule 4 (statement -> assignment .)
    PRINT           reduce using rule 4 (statement -> assignment .)
    DEF             reduce using rule 4 (statement -> assignment .)
    RETURN          reduce using rule 4 (statement -> assignment .)
    BREAK           reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)
    ELIF            reduce using rule 4 (statement -> assignment .)
    ELSE            reduce using rule 4 (statement -> assignment .)


state 5

    (5) statement -> if_statement .

    ID              reduce using rule 5 (statement -> if_statement .)
    IF              reduce using rule 5 (statement -> if_statement .)
    FOR             reduce using rule 5 (statement -> if_statement .)
    WHILE           reduce using rule 5 (statement -> if_statement .)
    PRINT           reduce using rule 5 (statement -> if_statement .)
    DEF             reduce using rule 5 (statement -> if_statement .)
    RETURN          reduce using rule 5 (statement -> if_statement .)
    BREAK           reduce using rule 5 (statement -> if_statement .)
    $end            reduce using rule 5 (statement -> if_statement .)
    ELIF            reduce using rule 5 (statement -> if_statement .)
    ELSE            reduce using rule 5 (statement -> if_statement .)


state 6

    (6) statement -> for_statement .

    ID              reduce using rule 6 (statement -> for_statement .)
    IF              reduce using rule 6 (statement -> for_statement .)
    FOR             reduce using rule 6 (statement -> for_statement .)
    WHILE           reduce using rule 6 (statement -> for_statement .)
    PRINT           reduce using rule 6 (statement -> for_statement .)
    DEF             reduce using rule 6 (statement -> for_statement .)
    RETURN          reduce using rule 6 (statement -> for_statement .)
    BREAK           reduce using rule 6 (statement -> for_statement .)
    $end            reduce using rule 6 (statement -> for_statement .)
    ELIF            reduce using rule 6 (statement -> for_statement .)
    ELSE            reduce using rule 6 (statement -> for_statement .)


state 7

    (7) statement -> while_statement .

    ID              reduce using rule 7 (statement -> while_statement .)
    IF              reduce using rule 7 (statement -> while_statement .)
    FOR             reduce using rule 7 (statement -> while_statement .)
    WHILE           reduce using rule 7 (statement -> while_statement .)
    PRINT           reduce using rule 7 (statement -> while_statement .)
    DEF             reduce using rule 7 (statement -> while_statement .)
    RETURN          reduce using rule 7 (statement -> while_statement .)
    BREAK           reduce using rule 7 (statement -> while_statement .)
    $end            reduce using rule 7 (statement -> while_statement .)
    ELIF            reduce using rule 7 (statement -> while_statement .)
    ELSE            reduce using rule 7 (statement -> while_statement .)


state 8

    (8) statement -> print_statement .

    ID              reduce using rule 8 (statement -> print_statement .)
    IF              reduce using rule 8 (statement -> print_statement .)
    FOR             reduce using rule 8 (statement -> print_statement .)
    WHILE           reduce using rule 8 (statement -> print_statement .)
    PRINT           reduce using rule 8 (statement -> print_statement .)
    DEF             reduce using rule 8 (statement -> print_statement .)
    RETURN          reduce using rule 8 (statement -> print_statement .)
    BREAK           reduce using rule 8 (statement -> print_statement .)
    $end            reduce using rule 8 (statement -> print_statement .)
    ELIF            reduce using rule 8 (statement -> print_statement .)
    ELSE            reduce using rule 8 (statement -> print_statement .)


state 9

    (9) statement -> function_def .

    ID              reduce using rule 9 (statement -> function_def .)
    IF              reduce using rule 9 (statement -> function_def .)
    FOR             reduce using rule 9 (statement -> function_def .)
    WHILE           reduce using rule 9 (statement -> function_def .)
    PRINT           reduce using rule 9 (statement -> function_def .)
    DEF             reduce using rule 9 (statement -> function_def .)
    RETURN          reduce using rule 9 (statement -> function_def .)
    BREAK           reduce using rule 9 (statement -> function_def .)
    $end            reduce using rule 9 (statement -> function_def .)
    ELIF            reduce using rule 9 (statement -> function_def .)
    ELSE            reduce using rule 9 (statement -> function_def .)


state 10

    (10) statement -> function_call .

    ID              reduce using rule 10 (statement -> function_call .)
    IF              reduce using rule 10 (statement -> function_call .)
    FOR             reduce using rule 10 (statement -> function_call .)
    WHILE           reduce using rule 10 (statement -> function_call .)
    PRINT           reduce using rule 10 (statement -> function_call .)
    DEF             reduce using rule 10 (statement -> function_call .)
    RETURN          reduce using rule 10 (statement -> function_call .)
    BREAK           reduce using rule 10 (statement -> function_call .)
    $end            reduce using rule 10 (statement -> function_call .)
    ELIF            reduce using rule 10 (statement -> function_call .)
    ELSE            reduce using rule 10 (statement -> function_call .)


state 11

    (11) statement -> return_statement .

    ID              reduce using rule 11 (statement -> return_statement .)
    IF              reduce using rule 11 (statement -> return_statement .)
    FOR             reduce using rule 11 (statement -> return_statement .)
    WHILE           reduce using rule 11 (statement -> return_statement .)
    PRINT           reduce using rule 11 (statement -> return_statement .)
    DEF             reduce using rule 11 (statement -> return_statement .)
    RETURN          reduce using rule 11 (statement -> return_statement .)
    BREAK           reduce using rule 11 (statement -> return_statement .)
    $end            reduce using rule 11 (statement -> return_statement .)
    ELIF            reduce using rule 11 (statement -> return_statement .)
    ELSE            reduce using rule 11 (statement -> return_statement .)


state 12

    (12) statement -> break_statement .

    ID              reduce using rule 12 (statement -> break_statement .)
    IF              reduce using rule 12 (statement -> break_statement .)
    FOR             reduce using rule 12 (statement -> break_statement .)
    WHILE           reduce using rule 12 (statement -> break_statement .)
    PRINT           reduce using rule 12 (statement -> break_statement .)
    DEF             reduce using rule 12 (statement -> break_statement .)
    RETURN          reduce using rule 12 (statement -> break_statement .)
    BREAK           reduce using rule 12 (statement -> break_statement .)
    $end            reduce using rule 12 (statement -> break_statement .)
    ELIF            reduce using rule 12 (statement -> break_statement .)
    ELSE            reduce using rule 12 (statement -> break_statement .)


state 13

    (14) assignment -> ID . ASSIGN expression
    (15) assignment -> ID . PLUSEQUALS expression
    (16) assignment -> ID . MINUSEQUALS expression
    (28) function_call -> ID . LPAREN arg_list RPAREN

    ASSIGN          shift and go to state 22
    PLUSEQUALS      shift and go to state 23
    MINUSEQUALS     shift and go to state 24
    LPAREN          shift and go to state 25


state 14

    (17) if_statement -> IF . condition COLON statement elif_list_opt ELSE statement
    (18) if_statement -> IF . condition COLON statement elif_list_opt
    (36) condition -> . expression EQUALS expression
    (37) condition -> . expression LT expression
    (38) condition -> . expression GT expression
    (39) condition -> . expression LE expression
    (40) condition -> . expression GE
    (41) expression -> . MINUS expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression MODULO expression
    (47) expression -> . expression OR expression
    (48) expression -> . expression AND expression
    (49) expression -> . NOT expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . ID
    (52) expression -> . TRUE
    (53) expression -> . FALSE
    (54) expression -> . NUMBER
    (55) expression -> . FLOAT
    (56) expression -> . STRING

    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 30
    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36

    condition                      shift and go to state 26
    expression                     shift and go to state 27

state 15

    (23) for_statement -> FOR . ID IN range statement

    ID              shift and go to state 37


state 16

    (24) while_statement -> WHILE . condition statement
    (36) condition -> . expression EQUALS expression
    (37) condition -> . expression LT expression
    (38) condition -> . expression GT expression
    (39) condition -> . expression LE expression
    (40) condition -> . expression GE
    (41) expression -> . MINUS expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression MODULO expression
    (47) expression -> . expression OR expression
    (48) expression -> . expression AND expression
    (49) expression -> . NOT expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . ID
    (52) expression -> . TRUE
    (53) expression -> . FALSE
    (54) expression -> . NUMBER
    (55) expression -> . FLOAT
    (56) expression -> . STRING

    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 30
    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36

    condition                      shift and go to state 38
    expression                     shift and go to state 27

state 17

    (26) print_statement -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 39


state 18

    (27) function_def -> DEF . ID LPAREN param_list RPAREN COLON statement_list

    ID              shift and go to state 40


state 19

    (29) return_statement -> RETURN . expression
    (41) expression -> . MINUS expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression MODULO expression
    (47) expression -> . expression OR expression
    (48) expression -> . expression AND expression
    (49) expression -> . NOT expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . ID
    (52) expression -> . TRUE
    (53) expression -> . FALSE
    (54) expression -> . NUMBER
    (55) expression -> . FLOAT
    (56) expression -> . STRING

    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 30
    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36

    expression                     shift and go to state 41

state 20

    (13) break_statement -> BREAK .

    ID              reduce using rule 13 (break_statement -> BREAK .)
    IF              reduce using rule 13 (break_statement -> BREAK .)
    FOR             reduce using rule 13 (break_statement -> BREAK .)
    WHILE           reduce using rule 13 (break_statement -> BREAK .)
    PRINT           reduce using rule 13 (break_statement -> BREAK .)
    DEF             reduce using rule 13 (break_statement -> BREAK .)
    RETURN          reduce using rule 13 (break_statement -> BREAK .)
    BREAK           reduce using rule 13 (break_statement -> BREAK .)
    $end            reduce using rule 13 (break_statement -> BREAK .)
    ELIF            reduce using rule 13 (break_statement -> BREAK .)
    ELSE            reduce using rule 13 (break_statement -> BREAK .)


state 21

    (2) statement_list -> statement_list statement .

    ID              reduce using rule 2 (statement_list -> statement_list statement .)
    IF              reduce using rule 2 (statement_list -> statement_list statement .)
    FOR             reduce using rule 2 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 2 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 2 (statement_list -> statement_list statement .)
    DEF             reduce using rule 2 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 2 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)
    ELIF            reduce using rule 2 (statement_list -> statement_list statement .)
    ELSE            reduce using rule 2 (statement_list -> statement_list statement .)


state 22

    (14) assignment -> ID ASSIGN . expression
    (41) expression -> . MINUS expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression MODULO expression
    (47) expression -> . expression OR expression
    (48) expression -> . expression AND expression
    (49) expression -> . NOT expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . ID
    (52) expression -> . TRUE
    (53) expression -> . FALSE
    (54) expression -> . NUMBER
    (55) expression -> . FLOAT
    (56) expression -> . STRING

    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 30
    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36

    expression                     shift and go to state 42

state 23

    (15) assignment -> ID PLUSEQUALS . expression
    (41) expression -> . MINUS expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression MODULO expression
    (47) expression -> . expression OR expression
    (48) expression -> . expression AND expression
    (49) expression -> . NOT expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . ID
    (52) expression -> . TRUE
    (53) expression -> . FALSE
    (54) expression -> . NUMBER
    (55) expression -> . FLOAT
    (56) expression -> . STRING

    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 30
    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36

    expression                     shift and go to state 43

state 24

    (16) assignment -> ID MINUSEQUALS . expression
    (41) expression -> . MINUS expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression MODULO expression
    (47) expression -> . expression OR expression
    (48) expression -> . expression AND expression
    (49) expression -> . NOT expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . ID
    (52) expression -> . TRUE
    (53) expression -> . FALSE
    (54) expression -> . NUMBER
    (55) expression -> . FLOAT
    (56) expression -> . STRING

    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 30
    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36

    expression                     shift and go to state 44

state 25

    (28) function_call -> ID LPAREN . arg_list RPAREN
    (33) arg_list -> . arg_list COMMA expression
    (34) arg_list -> . expression
    (35) arg_list -> . empty
    (41) expression -> . MINUS expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression MODULO expression
    (47) expression -> . expression OR expression
    (48) expression -> . expression AND expression
    (49) expression -> . NOT expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . ID
    (52) expression -> . TRUE
    (53) expression -> . FALSE
    (54) expression -> . NUMBER
    (55) expression -> . FLOAT
    (56) expression -> . STRING
    (57) empty -> .

    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 30
    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36
    RPAREN          reduce using rule 57 (empty -> .)
    COMMA           reduce using rule 57 (empty -> .)

    arg_list                       shift and go to state 45
    expression                     shift and go to state 46
    empty                          shift and go to state 47

state 26

    (17) if_statement -> IF condition . COLON statement elif_list_opt ELSE statement
    (18) if_statement -> IF condition . COLON statement elif_list_opt

    COLON           shift and go to state 48


state 27

    (36) condition -> expression . EQUALS expression
    (37) condition -> expression . LT expression
    (38) condition -> expression . GT expression
    (39) condition -> expression . LE expression
    (40) condition -> expression . GE
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . MODULO expression
    (47) expression -> expression . OR expression
    (48) expression -> expression . AND expression

    EQUALS          shift and go to state 49
    LT              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    MODULO          shift and go to state 58
    OR              shift and go to state 59
    AND             shift and go to state 60


state 28

    (41) expression -> MINUS . expression
    (41) expression -> . MINUS expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression MODULO expression
    (47) expression -> . expression OR expression
    (48) expression -> . expression AND expression
    (49) expression -> . NOT expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . ID
    (52) expression -> . TRUE
    (53) expression -> . FALSE
    (54) expression -> . NUMBER
    (55) expression -> . FLOAT
    (56) expression -> . STRING

    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 30
    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36

    expression                     shift and go to state 61

state 29

    (49) expression -> NOT . expression
    (41) expression -> . MINUS expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression MODULO expression
    (47) expression -> . expression OR expression
    (48) expression -> . expression AND expression
    (49) expression -> . NOT expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . ID
    (52) expression -> . TRUE
    (53) expression -> . FALSE
    (54) expression -> . NUMBER
    (55) expression -> . FLOAT
    (56) expression -> . STRING

    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 30
    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36

    expression                     shift and go to state 62

state 30

    (50) expression -> LPAREN . expression RPAREN
    (41) expression -> . MINUS expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression MODULO expression
    (47) expression -> . expression OR expression
    (48) expression -> . expression AND expression
    (49) expression -> . NOT expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . ID
    (52) expression -> . TRUE
    (53) expression -> . FALSE
    (54) expression -> . NUMBER
    (55) expression -> . FLOAT
    (56) expression -> . STRING

    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 30
    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36

    expression                     shift and go to state 63

state 31

    (51) expression -> ID .

    EQUALS          reduce using rule 51 (expression -> ID .)
    LT              reduce using rule 51 (expression -> ID .)
    GT              reduce using rule 51 (expression -> ID .)
    LE              reduce using rule 51 (expression -> ID .)
    GE              reduce using rule 51 (expression -> ID .)
    PLUS            reduce using rule 51 (expression -> ID .)
    MINUS           reduce using rule 51 (expression -> ID .)
    MULTIPLY        reduce using rule 51 (expression -> ID .)
    DIVIDE          reduce using rule 51 (expression -> ID .)
    MODULO          reduce using rule 51 (expression -> ID .)
    OR              reduce using rule 51 (expression -> ID .)
    AND             reduce using rule 51 (expression -> ID .)
    ID              reduce using rule 51 (expression -> ID .)
    IF              reduce using rule 51 (expression -> ID .)
    FOR             reduce using rule 51 (expression -> ID .)
    WHILE           reduce using rule 51 (expression -> ID .)
    PRINT           reduce using rule 51 (expression -> ID .)
    DEF             reduce using rule 51 (expression -> ID .)
    RETURN          reduce using rule 51 (expression -> ID .)
    BREAK           reduce using rule 51 (expression -> ID .)
    $end            reduce using rule 51 (expression -> ID .)
    ELIF            reduce using rule 51 (expression -> ID .)
    ELSE            reduce using rule 51 (expression -> ID .)
    RPAREN          reduce using rule 51 (expression -> ID .)
    COMMA           reduce using rule 51 (expression -> ID .)
    COLON           reduce using rule 51 (expression -> ID .)


state 32

    (52) expression -> TRUE .

    EQUALS          reduce using rule 52 (expression -> TRUE .)
    LT              reduce using rule 52 (expression -> TRUE .)
    GT              reduce using rule 52 (expression -> TRUE .)
    LE              reduce using rule 52 (expression -> TRUE .)
    GE              reduce using rule 52 (expression -> TRUE .)
    PLUS            reduce using rule 52 (expression -> TRUE .)
    MINUS           reduce using rule 52 (expression -> TRUE .)
    MULTIPLY        reduce using rule 52 (expression -> TRUE .)
    DIVIDE          reduce using rule 52 (expression -> TRUE .)
    MODULO          reduce using rule 52 (expression -> TRUE .)
    OR              reduce using rule 52 (expression -> TRUE .)
    AND             reduce using rule 52 (expression -> TRUE .)
    ID              reduce using rule 52 (expression -> TRUE .)
    IF              reduce using rule 52 (expression -> TRUE .)
    FOR             reduce using rule 52 (expression -> TRUE .)
    WHILE           reduce using rule 52 (expression -> TRUE .)
    PRINT           reduce using rule 52 (expression -> TRUE .)
    DEF             reduce using rule 52 (expression -> TRUE .)
    RETURN          reduce using rule 52 (expression -> TRUE .)
    BREAK           reduce using rule 52 (expression -> TRUE .)
    $end            reduce using rule 52 (expression -> TRUE .)
    ELIF            reduce using rule 52 (expression -> TRUE .)
    ELSE            reduce using rule 52 (expression -> TRUE .)
    RPAREN          reduce using rule 52 (expression -> TRUE .)
    COMMA           reduce using rule 52 (expression -> TRUE .)
    COLON           reduce using rule 52 (expression -> TRUE .)


state 33

    (53) expression -> FALSE .

    EQUALS          reduce using rule 53 (expression -> FALSE .)
    LT              reduce using rule 53 (expression -> FALSE .)
    GT              reduce using rule 53 (expression -> FALSE .)
    LE              reduce using rule 53 (expression -> FALSE .)
    GE              reduce using rule 53 (expression -> FALSE .)
    PLUS            reduce using rule 53 (expression -> FALSE .)
    MINUS           reduce using rule 53 (expression -> FALSE .)
    MULTIPLY        reduce using rule 53 (expression -> FALSE .)
    DIVIDE          reduce using rule 53 (expression -> FALSE .)
    MODULO          reduce using rule 53 (expression -> FALSE .)
    OR              reduce using rule 53 (expression -> FALSE .)
    AND             reduce using rule 53 (expression -> FALSE .)
    ID              reduce using rule 53 (expression -> FALSE .)
    IF              reduce using rule 53 (expression -> FALSE .)
    FOR             reduce using rule 53 (expression -> FALSE .)
    WHILE           reduce using rule 53 (expression -> FALSE .)
    PRINT           reduce using rule 53 (expression -> FALSE .)
    DEF             reduce using rule 53 (expression -> FALSE .)
    RETURN          reduce using rule 53 (expression -> FALSE .)
    BREAK           reduce using rule 53 (expression -> FALSE .)
    $end            reduce using rule 53 (expression -> FALSE .)
    ELIF            reduce using rule 53 (expression -> FALSE .)
    ELSE            reduce using rule 53 (expression -> FALSE .)
    RPAREN          reduce using rule 53 (expression -> FALSE .)
    COMMA           reduce using rule 53 (expression -> FALSE .)
    COLON           reduce using rule 53 (expression -> FALSE .)


state 34

    (54) expression -> NUMBER .

    EQUALS          reduce using rule 54 (expression -> NUMBER .)
    LT              reduce using rule 54 (expression -> NUMBER .)
    GT              reduce using rule 54 (expression -> NUMBER .)
    LE              reduce using rule 54 (expression -> NUMBER .)
    GE              reduce using rule 54 (expression -> NUMBER .)
    PLUS            reduce using rule 54 (expression -> NUMBER .)
    MINUS           reduce using rule 54 (expression -> NUMBER .)
    MULTIPLY        reduce using rule 54 (expression -> NUMBER .)
    DIVIDE          reduce using rule 54 (expression -> NUMBER .)
    MODULO          reduce using rule 54 (expression -> NUMBER .)
    OR              reduce using rule 54 (expression -> NUMBER .)
    AND             reduce using rule 54 (expression -> NUMBER .)
    ID              reduce using rule 54 (expression -> NUMBER .)
    IF              reduce using rule 54 (expression -> NUMBER .)
    FOR             reduce using rule 54 (expression -> NUMBER .)
    WHILE           reduce using rule 54 (expression -> NUMBER .)
    PRINT           reduce using rule 54 (expression -> NUMBER .)
    DEF             reduce using rule 54 (expression -> NUMBER .)
    RETURN          reduce using rule 54 (expression -> NUMBER .)
    BREAK           reduce using rule 54 (expression -> NUMBER .)
    $end            reduce using rule 54 (expression -> NUMBER .)
    ELIF            reduce using rule 54 (expression -> NUMBER .)
    ELSE            reduce using rule 54 (expression -> NUMBER .)
    RPAREN          reduce using rule 54 (expression -> NUMBER .)
    COMMA           reduce using rule 54 (expression -> NUMBER .)
    COLON           reduce using rule 54 (expression -> NUMBER .)


state 35

    (55) expression -> FLOAT .

    EQUALS          reduce using rule 55 (expression -> FLOAT .)
    LT              reduce using rule 55 (expression -> FLOAT .)
    GT              reduce using rule 55 (expression -> FLOAT .)
    LE              reduce using rule 55 (expression -> FLOAT .)
    GE              reduce using rule 55 (expression -> FLOAT .)
    PLUS            reduce using rule 55 (expression -> FLOAT .)
    MINUS           reduce using rule 55 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 55 (expression -> FLOAT .)
    DIVIDE          reduce using rule 55 (expression -> FLOAT .)
    MODULO          reduce using rule 55 (expression -> FLOAT .)
    OR              reduce using rule 55 (expression -> FLOAT .)
    AND             reduce using rule 55 (expression -> FLOAT .)
    ID              reduce using rule 55 (expression -> FLOAT .)
    IF              reduce using rule 55 (expression -> FLOAT .)
    FOR             reduce using rule 55 (expression -> FLOAT .)
    WHILE           reduce using rule 55 (expression -> FLOAT .)
    PRINT           reduce using rule 55 (expression -> FLOAT .)
    DEF             reduce using rule 55 (expression -> FLOAT .)
    RETURN          reduce using rule 55 (expression -> FLOAT .)
    BREAK           reduce using rule 55 (expression -> FLOAT .)
    $end            reduce using rule 55 (expression -> FLOAT .)
    ELIF            reduce using rule 55 (expression -> FLOAT .)
    ELSE            reduce using rule 55 (expression -> FLOAT .)
    RPAREN          reduce using rule 55 (expression -> FLOAT .)
    COMMA           reduce using rule 55 (expression -> FLOAT .)
    COLON           reduce using rule 55 (expression -> FLOAT .)


state 36

    (56) expression -> STRING .

    EQUALS          reduce using rule 56 (expression -> STRING .)
    LT              reduce using rule 56 (expression -> STRING .)
    GT              reduce using rule 56 (expression -> STRING .)
    LE              reduce using rule 56 (expression -> STRING .)
    GE              reduce using rule 56 (expression -> STRING .)
    PLUS            reduce using rule 56 (expression -> STRING .)
    MINUS           reduce using rule 56 (expression -> STRING .)
    MULTIPLY        reduce using rule 56 (expression -> STRING .)
    DIVIDE          reduce using rule 56 (expression -> STRING .)
    MODULO          reduce using rule 56 (expression -> STRING .)
    OR              reduce using rule 56 (expression -> STRING .)
    AND             reduce using rule 56 (expression -> STRING .)
    ID              reduce using rule 56 (expression -> STRING .)
    IF              reduce using rule 56 (expression -> STRING .)
    FOR             reduce using rule 56 (expression -> STRING .)
    WHILE           reduce using rule 56 (expression -> STRING .)
    PRINT           reduce using rule 56 (expression -> STRING .)
    DEF             reduce using rule 56 (expression -> STRING .)
    RETURN          reduce using rule 56 (expression -> STRING .)
    BREAK           reduce using rule 56 (expression -> STRING .)
    $end            reduce using rule 56 (expression -> STRING .)
    ELIF            reduce using rule 56 (expression -> STRING .)
    ELSE            reduce using rule 56 (expression -> STRING .)
    RPAREN          reduce using rule 56 (expression -> STRING .)
    COMMA           reduce using rule 56 (expression -> STRING .)
    COLON           reduce using rule 56 (expression -> STRING .)


state 37

    (23) for_statement -> FOR ID . IN range statement

    IN              shift and go to state 64


state 38

    (24) while_statement -> WHILE condition . statement
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . for_statement
    (7) statement -> . while_statement
    (8) statement -> . print_statement
    (9) statement -> . function_def
    (10) statement -> . function_call
    (11) statement -> . return_statement
    (12) statement -> . break_statement
    (14) assignment -> . ID ASSIGN expression
    (15) assignment -> . ID PLUSEQUALS expression
    (16) assignment -> . ID MINUSEQUALS expression
    (17) if_statement -> . IF condition COLON statement elif_list_opt ELSE statement
    (18) if_statement -> . IF condition COLON statement elif_list_opt
    (23) for_statement -> . FOR ID IN range statement
    (24) while_statement -> . WHILE condition statement
    (26) print_statement -> . PRINT LPAREN expression RPAREN
    (27) function_def -> . DEF ID LPAREN param_list RPAREN COLON statement_list
    (28) function_call -> . ID LPAREN arg_list RPAREN
    (29) return_statement -> . RETURN expression
    (13) break_statement -> . BREAK

    ID              shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 17
    DEF             shift and go to state 18
    RETURN          shift and go to state 19
    BREAK           shift and go to state 20

    statement                      shift and go to state 65
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    for_statement                  shift and go to state 6
    while_statement                shift and go to state 7
    print_statement                shift and go to state 8
    function_def                   shift and go to state 9
    function_call                  shift and go to state 10
    return_statement               shift and go to state 11
    break_statement                shift and go to state 12

state 39

    (26) print_statement -> PRINT LPAREN . expression RPAREN
    (41) expression -> . MINUS expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression MODULO expression
    (47) expression -> . expression OR expression
    (48) expression -> . expression AND expression
    (49) expression -> . NOT expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . ID
    (52) expression -> . TRUE
    (53) expression -> . FALSE
    (54) expression -> . NUMBER
    (55) expression -> . FLOAT
    (56) expression -> . STRING

    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 30
    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36

    expression                     shift and go to state 66

state 40

    (27) function_def -> DEF ID . LPAREN param_list RPAREN COLON statement_list

    LPAREN          shift and go to state 67


state 41

    (29) return_statement -> RETURN expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . MODULO expression
    (47) expression -> expression . OR expression
    (48) expression -> expression . AND expression

    ID              reduce using rule 29 (return_statement -> RETURN expression .)
    IF              reduce using rule 29 (return_statement -> RETURN expression .)
    FOR             reduce using rule 29 (return_statement -> RETURN expression .)
    WHILE           reduce using rule 29 (return_statement -> RETURN expression .)
    PRINT           reduce using rule 29 (return_statement -> RETURN expression .)
    DEF             reduce using rule 29 (return_statement -> RETURN expression .)
    RETURN          reduce using rule 29 (return_statement -> RETURN expression .)
    BREAK           reduce using rule 29 (return_statement -> RETURN expression .)
    $end            reduce using rule 29 (return_statement -> RETURN expression .)
    ELIF            reduce using rule 29 (return_statement -> RETURN expression .)
    ELSE            reduce using rule 29 (return_statement -> RETURN expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    MODULO          shift and go to state 58
    OR              shift and go to state 59
    AND             shift and go to state 60


state 42

    (14) assignment -> ID ASSIGN expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . MODULO expression
    (47) expression -> expression . OR expression
    (48) expression -> expression . AND expression

    ID              reduce using rule 14 (assignment -> ID ASSIGN expression .)
    IF              reduce using rule 14 (assignment -> ID ASSIGN expression .)
    FOR             reduce using rule 14 (assignment -> ID ASSIGN expression .)
    WHILE           reduce using rule 14 (assignment -> ID ASSIGN expression .)
    PRINT           reduce using rule 14 (assignment -> ID ASSIGN expression .)
    DEF             reduce using rule 14 (assignment -> ID ASSIGN expression .)
    RETURN          reduce using rule 14 (assignment -> ID ASSIGN expression .)
    BREAK           reduce using rule 14 (assignment -> ID ASSIGN expression .)
    $end            reduce using rule 14 (assignment -> ID ASSIGN expression .)
    ELIF            reduce using rule 14 (assignment -> ID ASSIGN expression .)
    ELSE            reduce using rule 14 (assignment -> ID ASSIGN expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    MODULO          shift and go to state 58
    OR              shift and go to state 59
    AND             shift and go to state 60


state 43

    (15) assignment -> ID PLUSEQUALS expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . MODULO expression
    (47) expression -> expression . OR expression
    (48) expression -> expression . AND expression

    ID              reduce using rule 15 (assignment -> ID PLUSEQUALS expression .)
    IF              reduce using rule 15 (assignment -> ID PLUSEQUALS expression .)
    FOR             reduce using rule 15 (assignment -> ID PLUSEQUALS expression .)
    WHILE           reduce using rule 15 (assignment -> ID PLUSEQUALS expression .)
    PRINT           reduce using rule 15 (assignment -> ID PLUSEQUALS expression .)
    DEF             reduce using rule 15 (assignment -> ID PLUSEQUALS expression .)
    RETURN          reduce using rule 15 (assignment -> ID PLUSEQUALS expression .)
    BREAK           reduce using rule 15 (assignment -> ID PLUSEQUALS expression .)
    $end            reduce using rule 15 (assignment -> ID PLUSEQUALS expression .)
    ELIF            reduce using rule 15 (assignment -> ID PLUSEQUALS expression .)
    ELSE            reduce using rule 15 (assignment -> ID PLUSEQUALS expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    MODULO          shift and go to state 58
    OR              shift and go to state 59
    AND             shift and go to state 60


state 44

    (16) assignment -> ID MINUSEQUALS expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . MODULO expression
    (47) expression -> expression . OR expression
    (48) expression -> expression . AND expression

    ID              reduce using rule 16 (assignment -> ID MINUSEQUALS expression .)
    IF              reduce using rule 16 (assignment -> ID MINUSEQUALS expression .)
    FOR             reduce using rule 16 (assignment -> ID MINUSEQUALS expression .)
    WHILE           reduce using rule 16 (assignment -> ID MINUSEQUALS expression .)
    PRINT           reduce using rule 16 (assignment -> ID MINUSEQUALS expression .)
    DEF             reduce using rule 16 (assignment -> ID MINUSEQUALS expression .)
    RETURN          reduce using rule 16 (assignment -> ID MINUSEQUALS expression .)
    BREAK           reduce using rule 16 (assignment -> ID MINUSEQUALS expression .)
    $end            reduce using rule 16 (assignment -> ID MINUSEQUALS expression .)
    ELIF            reduce using rule 16 (assignment -> ID MINUSEQUALS expression .)
    ELSE            reduce using rule 16 (assignment -> ID MINUSEQUALS expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    MODULO          shift and go to state 58
    OR              shift and go to state 59
    AND             shift and go to state 60


state 45

    (28) function_call -> ID LPAREN arg_list . RPAREN
    (33) arg_list -> arg_list . COMMA expression

    RPAREN          shift and go to state 68
    COMMA           shift and go to state 69


state 46

    (34) arg_list -> expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . MODULO expression
    (47) expression -> expression . OR expression
    (48) expression -> expression . AND expression

    RPAREN          reduce using rule 34 (arg_list -> expression .)
    COMMA           reduce using rule 34 (arg_list -> expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    MODULO          shift and go to state 58
    OR              shift and go to state 59
    AND             shift and go to state 60


state 47

    (35) arg_list -> empty .

    RPAREN          reduce using rule 35 (arg_list -> empty .)
    COMMA           reduce using rule 35 (arg_list -> empty .)


state 48

    (17) if_statement -> IF condition COLON . statement elif_list_opt ELSE statement
    (18) if_statement -> IF condition COLON . statement elif_list_opt
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . for_statement
    (7) statement -> . while_statement
    (8) statement -> . print_statement
    (9) statement -> . function_def
    (10) statement -> . function_call
    (11) statement -> . return_statement
    (12) statement -> . break_statement
    (14) assignment -> . ID ASSIGN expression
    (15) assignment -> . ID PLUSEQUALS expression
    (16) assignment -> . ID MINUSEQUALS expression
    (17) if_statement -> . IF condition COLON statement elif_list_opt ELSE statement
    (18) if_statement -> . IF condition COLON statement elif_list_opt
    (23) for_statement -> . FOR ID IN range statement
    (24) while_statement -> . WHILE condition statement
    (26) print_statement -> . PRINT LPAREN expression RPAREN
    (27) function_def -> . DEF ID LPAREN param_list RPAREN COLON statement_list
    (28) function_call -> . ID LPAREN arg_list RPAREN
    (29) return_statement -> . RETURN expression
    (13) break_statement -> . BREAK

    ID              shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 17
    DEF             shift and go to state 18
    RETURN          shift and go to state 19
    BREAK           shift and go to state 20

    statement                      shift and go to state 70
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    for_statement                  shift and go to state 6
    while_statement                shift and go to state 7
    print_statement                shift and go to state 8
    function_def                   shift and go to state 9
    function_call                  shift and go to state 10
    return_statement               shift and go to state 11
    break_statement                shift and go to state 12

state 49

    (36) condition -> expression EQUALS . expression
    (41) expression -> . MINUS expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression MODULO expression
    (47) expression -> . expression OR expression
    (48) expression -> . expression AND expression
    (49) expression -> . NOT expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . ID
    (52) expression -> . TRUE
    (53) expression -> . FALSE
    (54) expression -> . NUMBER
    (55) expression -> . FLOAT
    (56) expression -> . STRING

    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 30
    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36

    expression                     shift and go to state 71

state 50

    (37) condition -> expression LT . expression
    (41) expression -> . MINUS expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression MODULO expression
    (47) expression -> . expression OR expression
    (48) expression -> . expression AND expression
    (49) expression -> . NOT expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . ID
    (52) expression -> . TRUE
    (53) expression -> . FALSE
    (54) expression -> . NUMBER
    (55) expression -> . FLOAT
    (56) expression -> . STRING

    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 30
    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36

    expression                     shift and go to state 72

state 51

    (38) condition -> expression GT . expression
    (41) expression -> . MINUS expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression MODULO expression
    (47) expression -> . expression OR expression
    (48) expression -> . expression AND expression
    (49) expression -> . NOT expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . ID
    (52) expression -> . TRUE
    (53) expression -> . FALSE
    (54) expression -> . NUMBER
    (55) expression -> . FLOAT
    (56) expression -> . STRING

    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 30
    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36

    expression                     shift and go to state 73

state 52

    (39) condition -> expression LE . expression
    (41) expression -> . MINUS expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression MODULO expression
    (47) expression -> . expression OR expression
    (48) expression -> . expression AND expression
    (49) expression -> . NOT expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . ID
    (52) expression -> . TRUE
    (53) expression -> . FALSE
    (54) expression -> . NUMBER
    (55) expression -> . FLOAT
    (56) expression -> . STRING

    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 30
    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36

    expression                     shift and go to state 74

state 53

    (40) condition -> expression GE .

    COLON           reduce using rule 40 (condition -> expression GE .)
    ID              reduce using rule 40 (condition -> expression GE .)
    IF              reduce using rule 40 (condition -> expression GE .)
    FOR             reduce using rule 40 (condition -> expression GE .)
    WHILE           reduce using rule 40 (condition -> expression GE .)
    PRINT           reduce using rule 40 (condition -> expression GE .)
    DEF             reduce using rule 40 (condition -> expression GE .)
    RETURN          reduce using rule 40 (condition -> expression GE .)
    BREAK           reduce using rule 40 (condition -> expression GE .)


state 54

    (42) expression -> expression PLUS . expression
    (41) expression -> . MINUS expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression MODULO expression
    (47) expression -> . expression OR expression
    (48) expression -> . expression AND expression
    (49) expression -> . NOT expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . ID
    (52) expression -> . TRUE
    (53) expression -> . FALSE
    (54) expression -> . NUMBER
    (55) expression -> . FLOAT
    (56) expression -> . STRING

    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 30
    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36

    expression                     shift and go to state 75

state 55

    (43) expression -> expression MINUS . expression
    (41) expression -> . MINUS expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression MODULO expression
    (47) expression -> . expression OR expression
    (48) expression -> . expression AND expression
    (49) expression -> . NOT expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . ID
    (52) expression -> . TRUE
    (53) expression -> . FALSE
    (54) expression -> . NUMBER
    (55) expression -> . FLOAT
    (56) expression -> . STRING

    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 30
    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36

    expression                     shift and go to state 76

state 56

    (44) expression -> expression MULTIPLY . expression
    (41) expression -> . MINUS expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression MODULO expression
    (47) expression -> . expression OR expression
    (48) expression -> . expression AND expression
    (49) expression -> . NOT expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . ID
    (52) expression -> . TRUE
    (53) expression -> . FALSE
    (54) expression -> . NUMBER
    (55) expression -> . FLOAT
    (56) expression -> . STRING

    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 30
    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36

    expression                     shift and go to state 77

state 57

    (45) expression -> expression DIVIDE . expression
    (41) expression -> . MINUS expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression MODULO expression
    (47) expression -> . expression OR expression
    (48) expression -> . expression AND expression
    (49) expression -> . NOT expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . ID
    (52) expression -> . TRUE
    (53) expression -> . FALSE
    (54) expression -> . NUMBER
    (55) expression -> . FLOAT
    (56) expression -> . STRING

    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 30
    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36

    expression                     shift and go to state 78

state 58

    (46) expression -> expression MODULO . expression
    (41) expression -> . MINUS expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression MODULO expression
    (47) expression -> . expression OR expression
    (48) expression -> . expression AND expression
    (49) expression -> . NOT expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . ID
    (52) expression -> . TRUE
    (53) expression -> . FALSE
    (54) expression -> . NUMBER
    (55) expression -> . FLOAT
    (56) expression -> . STRING

    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 30
    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36

    expression                     shift and go to state 79

state 59

    (47) expression -> expression OR . expression
    (41) expression -> . MINUS expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression MODULO expression
    (47) expression -> . expression OR expression
    (48) expression -> . expression AND expression
    (49) expression -> . NOT expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . ID
    (52) expression -> . TRUE
    (53) expression -> . FALSE
    (54) expression -> . NUMBER
    (55) expression -> . FLOAT
    (56) expression -> . STRING

    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 30
    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36

    expression                     shift and go to state 80

state 60

    (48) expression -> expression AND . expression
    (41) expression -> . MINUS expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression MODULO expression
    (47) expression -> . expression OR expression
    (48) expression -> . expression AND expression
    (49) expression -> . NOT expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . ID
    (52) expression -> . TRUE
    (53) expression -> . FALSE
    (54) expression -> . NUMBER
    (55) expression -> . FLOAT
    (56) expression -> . STRING

    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 30
    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36

    expression                     shift and go to state 81

state 61

    (41) expression -> MINUS expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . MODULO expression
    (47) expression -> expression . OR expression
    (48) expression -> expression . AND expression

    EQUALS          reduce using rule 41 (expression -> MINUS expression .)
    LT              reduce using rule 41 (expression -> MINUS expression .)
    GT              reduce using rule 41 (expression -> MINUS expression .)
    LE              reduce using rule 41 (expression -> MINUS expression .)
    GE              reduce using rule 41 (expression -> MINUS expression .)
    PLUS            reduce using rule 41 (expression -> MINUS expression .)
    MINUS           reduce using rule 41 (expression -> MINUS expression .)
    MULTIPLY        reduce using rule 41 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 41 (expression -> MINUS expression .)
    MODULO          reduce using rule 41 (expression -> MINUS expression .)
    OR              reduce using rule 41 (expression -> MINUS expression .)
    AND             reduce using rule 41 (expression -> MINUS expression .)
    ID              reduce using rule 41 (expression -> MINUS expression .)
    IF              reduce using rule 41 (expression -> MINUS expression .)
    FOR             reduce using rule 41 (expression -> MINUS expression .)
    WHILE           reduce using rule 41 (expression -> MINUS expression .)
    PRINT           reduce using rule 41 (expression -> MINUS expression .)
    DEF             reduce using rule 41 (expression -> MINUS expression .)
    RETURN          reduce using rule 41 (expression -> MINUS expression .)
    BREAK           reduce using rule 41 (expression -> MINUS expression .)
    $end            reduce using rule 41 (expression -> MINUS expression .)
    ELIF            reduce using rule 41 (expression -> MINUS expression .)
    ELSE            reduce using rule 41 (expression -> MINUS expression .)
    RPAREN          reduce using rule 41 (expression -> MINUS expression .)
    COMMA           reduce using rule 41 (expression -> MINUS expression .)
    COLON           reduce using rule 41 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! MULTIPLY        [ shift and go to state 56 ]
  ! DIVIDE          [ shift and go to state 57 ]
  ! MODULO          [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]


state 62

    (49) expression -> NOT expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . MODULO expression
    (47) expression -> expression . OR expression
    (48) expression -> expression . AND expression

    EQUALS          reduce using rule 49 (expression -> NOT expression .)
    LT              reduce using rule 49 (expression -> NOT expression .)
    GT              reduce using rule 49 (expression -> NOT expression .)
    LE              reduce using rule 49 (expression -> NOT expression .)
    GE              reduce using rule 49 (expression -> NOT expression .)
    OR              reduce using rule 49 (expression -> NOT expression .)
    AND             reduce using rule 49 (expression -> NOT expression .)
    ID              reduce using rule 49 (expression -> NOT expression .)
    IF              reduce using rule 49 (expression -> NOT expression .)
    FOR             reduce using rule 49 (expression -> NOT expression .)
    WHILE           reduce using rule 49 (expression -> NOT expression .)
    PRINT           reduce using rule 49 (expression -> NOT expression .)
    DEF             reduce using rule 49 (expression -> NOT expression .)
    RETURN          reduce using rule 49 (expression -> NOT expression .)
    BREAK           reduce using rule 49 (expression -> NOT expression .)
    $end            reduce using rule 49 (expression -> NOT expression .)
    ELIF            reduce using rule 49 (expression -> NOT expression .)
    ELSE            reduce using rule 49 (expression -> NOT expression .)
    RPAREN          reduce using rule 49 (expression -> NOT expression .)
    COMMA           reduce using rule 49 (expression -> NOT expression .)
    COLON           reduce using rule 49 (expression -> NOT expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    MODULO          shift and go to state 58

  ! PLUS            [ reduce using rule 49 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 49 (expression -> NOT expression .) ]
  ! MULTIPLY        [ reduce using rule 49 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 49 (expression -> NOT expression .) ]
  ! MODULO          [ reduce using rule 49 (expression -> NOT expression .) ]
  ! OR              [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]


state 63

    (50) expression -> LPAREN expression . RPAREN
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . MODULO expression
    (47) expression -> expression . OR expression
    (48) expression -> expression . AND expression

    RPAREN          shift and go to state 82
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    MODULO          shift and go to state 58
    OR              shift and go to state 59
    AND             shift and go to state 60


state 64

    (23) for_statement -> FOR ID IN . range statement
    (25) range -> . RANGE LPAREN expression COMMA expression RPAREN

    RANGE           shift and go to state 84

    range                          shift and go to state 83

state 65

    (24) while_statement -> WHILE condition statement .

    ID              reduce using rule 24 (while_statement -> WHILE condition statement .)
    IF              reduce using rule 24 (while_statement -> WHILE condition statement .)
    FOR             reduce using rule 24 (while_statement -> WHILE condition statement .)
    WHILE           reduce using rule 24 (while_statement -> WHILE condition statement .)
    PRINT           reduce using rule 24 (while_statement -> WHILE condition statement .)
    DEF             reduce using rule 24 (while_statement -> WHILE condition statement .)
    RETURN          reduce using rule 24 (while_statement -> WHILE condition statement .)
    BREAK           reduce using rule 24 (while_statement -> WHILE condition statement .)
    $end            reduce using rule 24 (while_statement -> WHILE condition statement .)
    ELIF            reduce using rule 24 (while_statement -> WHILE condition statement .)
    ELSE            reduce using rule 24 (while_statement -> WHILE condition statement .)


state 66

    (26) print_statement -> PRINT LPAREN expression . RPAREN
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . MODULO expression
    (47) expression -> expression . OR expression
    (48) expression -> expression . AND expression

    RPAREN          shift and go to state 85
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    MODULO          shift and go to state 58
    OR              shift and go to state 59
    AND             shift and go to state 60


state 67

    (27) function_def -> DEF ID LPAREN . param_list RPAREN COLON statement_list
    (30) param_list -> . param_list COMMA ID
    (31) param_list -> . ID
    (32) param_list -> . empty
    (57) empty -> .

    ID              shift and go to state 86
    RPAREN          reduce using rule 57 (empty -> .)
    COMMA           reduce using rule 57 (empty -> .)

    param_list                     shift and go to state 87
    empty                          shift and go to state 88

state 68

    (28) function_call -> ID LPAREN arg_list RPAREN .

    ID              reduce using rule 28 (function_call -> ID LPAREN arg_list RPAREN .)
    IF              reduce using rule 28 (function_call -> ID LPAREN arg_list RPAREN .)
    FOR             reduce using rule 28 (function_call -> ID LPAREN arg_list RPAREN .)
    WHILE           reduce using rule 28 (function_call -> ID LPAREN arg_list RPAREN .)
    PRINT           reduce using rule 28 (function_call -> ID LPAREN arg_list RPAREN .)
    DEF             reduce using rule 28 (function_call -> ID LPAREN arg_list RPAREN .)
    RETURN          reduce using rule 28 (function_call -> ID LPAREN arg_list RPAREN .)
    BREAK           reduce using rule 28 (function_call -> ID LPAREN arg_list RPAREN .)
    $end            reduce using rule 28 (function_call -> ID LPAREN arg_list RPAREN .)
    ELIF            reduce using rule 28 (function_call -> ID LPAREN arg_list RPAREN .)
    ELSE            reduce using rule 28 (function_call -> ID LPAREN arg_list RPAREN .)


state 69

    (33) arg_list -> arg_list COMMA . expression
    (41) expression -> . MINUS expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression MODULO expression
    (47) expression -> . expression OR expression
    (48) expression -> . expression AND expression
    (49) expression -> . NOT expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . ID
    (52) expression -> . TRUE
    (53) expression -> . FALSE
    (54) expression -> . NUMBER
    (55) expression -> . FLOAT
    (56) expression -> . STRING

    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 30
    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36

    expression                     shift and go to state 89

state 70

    (17) if_statement -> IF condition COLON statement . elif_list_opt ELSE statement
    (18) if_statement -> IF condition COLON statement . elif_list_opt
    (19) elif_list_opt -> . elif_list
    (20) elif_list_opt -> . empty
    (21) elif_list -> . elif_list ELIF condition COLON statement
    (22) elif_list -> . ELIF condition COLON statement
    (57) empty -> .

  ! shift/reduce conflict for ELIF resolved as shift
    ELIF            shift and go to state 93
    ID              reduce using rule 57 (empty -> .)
    IF              reduce using rule 57 (empty -> .)
    FOR             reduce using rule 57 (empty -> .)
    WHILE           reduce using rule 57 (empty -> .)
    PRINT           reduce using rule 57 (empty -> .)
    DEF             reduce using rule 57 (empty -> .)
    RETURN          reduce using rule 57 (empty -> .)
    BREAK           reduce using rule 57 (empty -> .)
    $end            reduce using rule 57 (empty -> .)
    ELSE            reduce using rule 57 (empty -> .)

  ! ELIF            [ reduce using rule 57 (empty -> .) ]

    elif_list_opt                  shift and go to state 90
    elif_list                      shift and go to state 91
    empty                          shift and go to state 92

state 71

    (36) condition -> expression EQUALS expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . MODULO expression
    (47) expression -> expression . OR expression
    (48) expression -> expression . AND expression

    COLON           reduce using rule 36 (condition -> expression EQUALS expression .)
    ID              reduce using rule 36 (condition -> expression EQUALS expression .)
    IF              reduce using rule 36 (condition -> expression EQUALS expression .)
    FOR             reduce using rule 36 (condition -> expression EQUALS expression .)
    WHILE           reduce using rule 36 (condition -> expression EQUALS expression .)
    PRINT           reduce using rule 36 (condition -> expression EQUALS expression .)
    DEF             reduce using rule 36 (condition -> expression EQUALS expression .)
    RETURN          reduce using rule 36 (condition -> expression EQUALS expression .)
    BREAK           reduce using rule 36 (condition -> expression EQUALS expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    MODULO          shift and go to state 58
    OR              shift and go to state 59
    AND             shift and go to state 60


state 72

    (37) condition -> expression LT expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . MODULO expression
    (47) expression -> expression . OR expression
    (48) expression -> expression . AND expression

    COLON           reduce using rule 37 (condition -> expression LT expression .)
    ID              reduce using rule 37 (condition -> expression LT expression .)
    IF              reduce using rule 37 (condition -> expression LT expression .)
    FOR             reduce using rule 37 (condition -> expression LT expression .)
    WHILE           reduce using rule 37 (condition -> expression LT expression .)
    PRINT           reduce using rule 37 (condition -> expression LT expression .)
    DEF             reduce using rule 37 (condition -> expression LT expression .)
    RETURN          reduce using rule 37 (condition -> expression LT expression .)
    BREAK           reduce using rule 37 (condition -> expression LT expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    MODULO          shift and go to state 58
    OR              shift and go to state 59
    AND             shift and go to state 60


state 73

    (38) condition -> expression GT expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . MODULO expression
    (47) expression -> expression . OR expression
    (48) expression -> expression . AND expression

    COLON           reduce using rule 38 (condition -> expression GT expression .)
    ID              reduce using rule 38 (condition -> expression GT expression .)
    IF              reduce using rule 38 (condition -> expression GT expression .)
    FOR             reduce using rule 38 (condition -> expression GT expression .)
    WHILE           reduce using rule 38 (condition -> expression GT expression .)
    PRINT           reduce using rule 38 (condition -> expression GT expression .)
    DEF             reduce using rule 38 (condition -> expression GT expression .)
    RETURN          reduce using rule 38 (condition -> expression GT expression .)
    BREAK           reduce using rule 38 (condition -> expression GT expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    MODULO          shift and go to state 58
    OR              shift and go to state 59
    AND             shift and go to state 60


state 74

    (39) condition -> expression LE expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . MODULO expression
    (47) expression -> expression . OR expression
    (48) expression -> expression . AND expression

    COLON           reduce using rule 39 (condition -> expression LE expression .)
    ID              reduce using rule 39 (condition -> expression LE expression .)
    IF              reduce using rule 39 (condition -> expression LE expression .)
    FOR             reduce using rule 39 (condition -> expression LE expression .)
    WHILE           reduce using rule 39 (condition -> expression LE expression .)
    PRINT           reduce using rule 39 (condition -> expression LE expression .)
    DEF             reduce using rule 39 (condition -> expression LE expression .)
    RETURN          reduce using rule 39 (condition -> expression LE expression .)
    BREAK           reduce using rule 39 (condition -> expression LE expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    MODULO          shift and go to state 58
    OR              shift and go to state 59
    AND             shift and go to state 60


state 75

    (42) expression -> expression PLUS expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . MODULO expression
    (47) expression -> expression . OR expression
    (48) expression -> expression . AND expression

    EQUALS          reduce using rule 42 (expression -> expression PLUS expression .)
    LT              reduce using rule 42 (expression -> expression PLUS expression .)
    GT              reduce using rule 42 (expression -> expression PLUS expression .)
    LE              reduce using rule 42 (expression -> expression PLUS expression .)
    GE              reduce using rule 42 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 42 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 42 (expression -> expression PLUS expression .)
    OR              reduce using rule 42 (expression -> expression PLUS expression .)
    AND             reduce using rule 42 (expression -> expression PLUS expression .)
    ID              reduce using rule 42 (expression -> expression PLUS expression .)
    IF              reduce using rule 42 (expression -> expression PLUS expression .)
    FOR             reduce using rule 42 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 42 (expression -> expression PLUS expression .)
    PRINT           reduce using rule 42 (expression -> expression PLUS expression .)
    DEF             reduce using rule 42 (expression -> expression PLUS expression .)
    RETURN          reduce using rule 42 (expression -> expression PLUS expression .)
    BREAK           reduce using rule 42 (expression -> expression PLUS expression .)
    $end            reduce using rule 42 (expression -> expression PLUS expression .)
    ELIF            reduce using rule 42 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 42 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 42 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 42 (expression -> expression PLUS expression .)
    COLON           reduce using rule 42 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    MODULO          shift and go to state 58

  ! MULTIPLY        [ reduce using rule 42 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 42 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! OR              [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]


state 76

    (43) expression -> expression MINUS expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . MODULO expression
    (47) expression -> expression . OR expression
    (48) expression -> expression . AND expression

    EQUALS          reduce using rule 43 (expression -> expression MINUS expression .)
    LT              reduce using rule 43 (expression -> expression MINUS expression .)
    GT              reduce using rule 43 (expression -> expression MINUS expression .)
    LE              reduce using rule 43 (expression -> expression MINUS expression .)
    GE              reduce using rule 43 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 43 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 43 (expression -> expression MINUS expression .)
    OR              reduce using rule 43 (expression -> expression MINUS expression .)
    AND             reduce using rule 43 (expression -> expression MINUS expression .)
    ID              reduce using rule 43 (expression -> expression MINUS expression .)
    IF              reduce using rule 43 (expression -> expression MINUS expression .)
    FOR             reduce using rule 43 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 43 (expression -> expression MINUS expression .)
    PRINT           reduce using rule 43 (expression -> expression MINUS expression .)
    DEF             reduce using rule 43 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 43 (expression -> expression MINUS expression .)
    BREAK           reduce using rule 43 (expression -> expression MINUS expression .)
    $end            reduce using rule 43 (expression -> expression MINUS expression .)
    ELIF            reduce using rule 43 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 43 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 43 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 43 (expression -> expression MINUS expression .)
    COLON           reduce using rule 43 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    MODULO          shift and go to state 58

  ! MULTIPLY        [ reduce using rule 43 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 43 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! OR              [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]


state 77

    (44) expression -> expression MULTIPLY expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . MODULO expression
    (47) expression -> expression . OR expression
    (48) expression -> expression . AND expression

    EQUALS          reduce using rule 44 (expression -> expression MULTIPLY expression .)
    LT              reduce using rule 44 (expression -> expression MULTIPLY expression .)
    GT              reduce using rule 44 (expression -> expression MULTIPLY expression .)
    LE              reduce using rule 44 (expression -> expression MULTIPLY expression .)
    GE              reduce using rule 44 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 44 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 44 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 44 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 44 (expression -> expression MULTIPLY expression .)
    MODULO          reduce using rule 44 (expression -> expression MULTIPLY expression .)
    OR              reduce using rule 44 (expression -> expression MULTIPLY expression .)
    AND             reduce using rule 44 (expression -> expression MULTIPLY expression .)
    ID              reduce using rule 44 (expression -> expression MULTIPLY expression .)
    IF              reduce using rule 44 (expression -> expression MULTIPLY expression .)
    FOR             reduce using rule 44 (expression -> expression MULTIPLY expression .)
    WHILE           reduce using rule 44 (expression -> expression MULTIPLY expression .)
    PRINT           reduce using rule 44 (expression -> expression MULTIPLY expression .)
    DEF             reduce using rule 44 (expression -> expression MULTIPLY expression .)
    RETURN          reduce using rule 44 (expression -> expression MULTIPLY expression .)
    BREAK           reduce using rule 44 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 44 (expression -> expression MULTIPLY expression .)
    ELIF            reduce using rule 44 (expression -> expression MULTIPLY expression .)
    ELSE            reduce using rule 44 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 44 (expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 44 (expression -> expression MULTIPLY expression .)
    COLON           reduce using rule 44 (expression -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! MULTIPLY        [ shift and go to state 56 ]
  ! DIVIDE          [ shift and go to state 57 ]
  ! MODULO          [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]


state 78

    (45) expression -> expression DIVIDE expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . MODULO expression
    (47) expression -> expression . OR expression
    (48) expression -> expression . AND expression

    EQUALS          reduce using rule 45 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 45 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 45 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 45 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 45 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 45 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 45 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 45 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 45 (expression -> expression DIVIDE expression .)
    MODULO          reduce using rule 45 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 45 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 45 (expression -> expression DIVIDE expression .)
    ID              reduce using rule 45 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 45 (expression -> expression DIVIDE expression .)
    FOR             reduce using rule 45 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 45 (expression -> expression DIVIDE expression .)
    PRINT           reduce using rule 45 (expression -> expression DIVIDE expression .)
    DEF             reduce using rule 45 (expression -> expression DIVIDE expression .)
    RETURN          reduce using rule 45 (expression -> expression DIVIDE expression .)
    BREAK           reduce using rule 45 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 45 (expression -> expression DIVIDE expression .)
    ELIF            reduce using rule 45 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 45 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 45 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 45 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 45 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! MULTIPLY        [ shift and go to state 56 ]
  ! DIVIDE          [ shift and go to state 57 ]
  ! MODULO          [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]


state 79

    (46) expression -> expression MODULO expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . MODULO expression
    (47) expression -> expression . OR expression
    (48) expression -> expression . AND expression

    EQUALS          reduce using rule 46 (expression -> expression MODULO expression .)
    LT              reduce using rule 46 (expression -> expression MODULO expression .)
    GT              reduce using rule 46 (expression -> expression MODULO expression .)
    LE              reduce using rule 46 (expression -> expression MODULO expression .)
    GE              reduce using rule 46 (expression -> expression MODULO expression .)
    PLUS            reduce using rule 46 (expression -> expression MODULO expression .)
    MINUS           reduce using rule 46 (expression -> expression MODULO expression .)
    MULTIPLY        reduce using rule 46 (expression -> expression MODULO expression .)
    DIVIDE          reduce using rule 46 (expression -> expression MODULO expression .)
    MODULO          reduce using rule 46 (expression -> expression MODULO expression .)
    OR              reduce using rule 46 (expression -> expression MODULO expression .)
    AND             reduce using rule 46 (expression -> expression MODULO expression .)
    ID              reduce using rule 46 (expression -> expression MODULO expression .)
    IF              reduce using rule 46 (expression -> expression MODULO expression .)
    FOR             reduce using rule 46 (expression -> expression MODULO expression .)
    WHILE           reduce using rule 46 (expression -> expression MODULO expression .)
    PRINT           reduce using rule 46 (expression -> expression MODULO expression .)
    DEF             reduce using rule 46 (expression -> expression MODULO expression .)
    RETURN          reduce using rule 46 (expression -> expression MODULO expression .)
    BREAK           reduce using rule 46 (expression -> expression MODULO expression .)
    $end            reduce using rule 46 (expression -> expression MODULO expression .)
    ELIF            reduce using rule 46 (expression -> expression MODULO expression .)
    ELSE            reduce using rule 46 (expression -> expression MODULO expression .)
    RPAREN          reduce using rule 46 (expression -> expression MODULO expression .)
    COMMA           reduce using rule 46 (expression -> expression MODULO expression .)
    COLON           reduce using rule 46 (expression -> expression MODULO expression .)

  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! MULTIPLY        [ shift and go to state 56 ]
  ! DIVIDE          [ shift and go to state 57 ]
  ! MODULO          [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]


state 80

    (47) expression -> expression OR expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . MODULO expression
    (47) expression -> expression . OR expression
    (48) expression -> expression . AND expression

    EQUALS          reduce using rule 47 (expression -> expression OR expression .)
    LT              reduce using rule 47 (expression -> expression OR expression .)
    GT              reduce using rule 47 (expression -> expression OR expression .)
    LE              reduce using rule 47 (expression -> expression OR expression .)
    GE              reduce using rule 47 (expression -> expression OR expression .)
    OR              reduce using rule 47 (expression -> expression OR expression .)
    ID              reduce using rule 47 (expression -> expression OR expression .)
    IF              reduce using rule 47 (expression -> expression OR expression .)
    FOR             reduce using rule 47 (expression -> expression OR expression .)
    WHILE           reduce using rule 47 (expression -> expression OR expression .)
    PRINT           reduce using rule 47 (expression -> expression OR expression .)
    DEF             reduce using rule 47 (expression -> expression OR expression .)
    RETURN          reduce using rule 47 (expression -> expression OR expression .)
    BREAK           reduce using rule 47 (expression -> expression OR expression .)
    $end            reduce using rule 47 (expression -> expression OR expression .)
    ELIF            reduce using rule 47 (expression -> expression OR expression .)
    ELSE            reduce using rule 47 (expression -> expression OR expression .)
    RPAREN          reduce using rule 47 (expression -> expression OR expression .)
    COMMA           reduce using rule 47 (expression -> expression OR expression .)
    COLON           reduce using rule 47 (expression -> expression OR expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    MODULO          shift and go to state 58
    AND             shift and go to state 60

  ! PLUS            [ reduce using rule 47 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 47 (expression -> expression OR expression .) ]
  ! MULTIPLY        [ reduce using rule 47 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 47 (expression -> expression OR expression .) ]
  ! MODULO          [ reduce using rule 47 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 47 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 59 ]


state 81

    (48) expression -> expression AND expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . MODULO expression
    (47) expression -> expression . OR expression
    (48) expression -> expression . AND expression

    EQUALS          reduce using rule 48 (expression -> expression AND expression .)
    LT              reduce using rule 48 (expression -> expression AND expression .)
    GT              reduce using rule 48 (expression -> expression AND expression .)
    LE              reduce using rule 48 (expression -> expression AND expression .)
    GE              reduce using rule 48 (expression -> expression AND expression .)
    OR              reduce using rule 48 (expression -> expression AND expression .)
    AND             reduce using rule 48 (expression -> expression AND expression .)
    ID              reduce using rule 48 (expression -> expression AND expression .)
    IF              reduce using rule 48 (expression -> expression AND expression .)
    FOR             reduce using rule 48 (expression -> expression AND expression .)
    WHILE           reduce using rule 48 (expression -> expression AND expression .)
    PRINT           reduce using rule 48 (expression -> expression AND expression .)
    DEF             reduce using rule 48 (expression -> expression AND expression .)
    RETURN          reduce using rule 48 (expression -> expression AND expression .)
    BREAK           reduce using rule 48 (expression -> expression AND expression .)
    $end            reduce using rule 48 (expression -> expression AND expression .)
    ELIF            reduce using rule 48 (expression -> expression AND expression .)
    ELSE            reduce using rule 48 (expression -> expression AND expression .)
    RPAREN          reduce using rule 48 (expression -> expression AND expression .)
    COMMA           reduce using rule 48 (expression -> expression AND expression .)
    COLON           reduce using rule 48 (expression -> expression AND expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    MODULO          shift and go to state 58

  ! PLUS            [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! MULTIPLY        [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! MODULO          [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! OR              [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]


state 82

    (50) expression -> LPAREN expression RPAREN .

    EQUALS          reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    DEF             reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    ELIF            reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 50 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 50 (expression -> LPAREN expression RPAREN .)


state 83

    (23) for_statement -> FOR ID IN range . statement
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . for_statement
    (7) statement -> . while_statement
    (8) statement -> . print_statement
    (9) statement -> . function_def
    (10) statement -> . function_call
    (11) statement -> . return_statement
    (12) statement -> . break_statement
    (14) assignment -> . ID ASSIGN expression
    (15) assignment -> . ID PLUSEQUALS expression
    (16) assignment -> . ID MINUSEQUALS expression
    (17) if_statement -> . IF condition COLON statement elif_list_opt ELSE statement
    (18) if_statement -> . IF condition COLON statement elif_list_opt
    (23) for_statement -> . FOR ID IN range statement
    (24) while_statement -> . WHILE condition statement
    (26) print_statement -> . PRINT LPAREN expression RPAREN
    (27) function_def -> . DEF ID LPAREN param_list RPAREN COLON statement_list
    (28) function_call -> . ID LPAREN arg_list RPAREN
    (29) return_statement -> . RETURN expression
    (13) break_statement -> . BREAK

    ID              shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 17
    DEF             shift and go to state 18
    RETURN          shift and go to state 19
    BREAK           shift and go to state 20

    statement                      shift and go to state 94
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    for_statement                  shift and go to state 6
    while_statement                shift and go to state 7
    print_statement                shift and go to state 8
    function_def                   shift and go to state 9
    function_call                  shift and go to state 10
    return_statement               shift and go to state 11
    break_statement                shift and go to state 12

state 84

    (25) range -> RANGE . LPAREN expression COMMA expression RPAREN

    LPAREN          shift and go to state 95


state 85

    (26) print_statement -> PRINT LPAREN expression RPAREN .

    ID              reduce using rule 26 (print_statement -> PRINT LPAREN expression RPAREN .)
    IF              reduce using rule 26 (print_statement -> PRINT LPAREN expression RPAREN .)
    FOR             reduce using rule 26 (print_statement -> PRINT LPAREN expression RPAREN .)
    WHILE           reduce using rule 26 (print_statement -> PRINT LPAREN expression RPAREN .)
    PRINT           reduce using rule 26 (print_statement -> PRINT LPAREN expression RPAREN .)
    DEF             reduce using rule 26 (print_statement -> PRINT LPAREN expression RPAREN .)
    RETURN          reduce using rule 26 (print_statement -> PRINT LPAREN expression RPAREN .)
    BREAK           reduce using rule 26 (print_statement -> PRINT LPAREN expression RPAREN .)
    $end            reduce using rule 26 (print_statement -> PRINT LPAREN expression RPAREN .)
    ELIF            reduce using rule 26 (print_statement -> PRINT LPAREN expression RPAREN .)
    ELSE            reduce using rule 26 (print_statement -> PRINT LPAREN expression RPAREN .)


state 86

    (31) param_list -> ID .

    RPAREN          reduce using rule 31 (param_list -> ID .)
    COMMA           reduce using rule 31 (param_list -> ID .)


state 87

    (27) function_def -> DEF ID LPAREN param_list . RPAREN COLON statement_list
    (30) param_list -> param_list . COMMA ID

    RPAREN          shift and go to state 96
    COMMA           shift and go to state 97


state 88

    (32) param_list -> empty .

    RPAREN          reduce using rule 32 (param_list -> empty .)
    COMMA           reduce using rule 32 (param_list -> empty .)


state 89

    (33) arg_list -> arg_list COMMA expression .
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . MODULO expression
    (47) expression -> expression . OR expression
    (48) expression -> expression . AND expression

    RPAREN          reduce using rule 33 (arg_list -> arg_list COMMA expression .)
    COMMA           reduce using rule 33 (arg_list -> arg_list COMMA expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    MODULO          shift and go to state 58
    OR              shift and go to state 59
    AND             shift and go to state 60


state 90

    (17) if_statement -> IF condition COLON statement elif_list_opt . ELSE statement
    (18) if_statement -> IF condition COLON statement elif_list_opt .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 98
    ID              reduce using rule 18 (if_statement -> IF condition COLON statement elif_list_opt .)
    IF              reduce using rule 18 (if_statement -> IF condition COLON statement elif_list_opt .)
    FOR             reduce using rule 18 (if_statement -> IF condition COLON statement elif_list_opt .)
    WHILE           reduce using rule 18 (if_statement -> IF condition COLON statement elif_list_opt .)
    PRINT           reduce using rule 18 (if_statement -> IF condition COLON statement elif_list_opt .)
    DEF             reduce using rule 18 (if_statement -> IF condition COLON statement elif_list_opt .)
    RETURN          reduce using rule 18 (if_statement -> IF condition COLON statement elif_list_opt .)
    BREAK           reduce using rule 18 (if_statement -> IF condition COLON statement elif_list_opt .)
    $end            reduce using rule 18 (if_statement -> IF condition COLON statement elif_list_opt .)
    ELIF            reduce using rule 18 (if_statement -> IF condition COLON statement elif_list_opt .)

  ! ELSE            [ reduce using rule 18 (if_statement -> IF condition COLON statement elif_list_opt .) ]


state 91

    (19) elif_list_opt -> elif_list .
    (21) elif_list -> elif_list . ELIF condition COLON statement

  ! shift/reduce conflict for ELIF resolved as shift
    ID              reduce using rule 19 (elif_list_opt -> elif_list .)
    IF              reduce using rule 19 (elif_list_opt -> elif_list .)
    FOR             reduce using rule 19 (elif_list_opt -> elif_list .)
    WHILE           reduce using rule 19 (elif_list_opt -> elif_list .)
    PRINT           reduce using rule 19 (elif_list_opt -> elif_list .)
    DEF             reduce using rule 19 (elif_list_opt -> elif_list .)
    RETURN          reduce using rule 19 (elif_list_opt -> elif_list .)
    BREAK           reduce using rule 19 (elif_list_opt -> elif_list .)
    $end            reduce using rule 19 (elif_list_opt -> elif_list .)
    ELSE            reduce using rule 19 (elif_list_opt -> elif_list .)
    ELIF            shift and go to state 99

  ! ELIF            [ reduce using rule 19 (elif_list_opt -> elif_list .) ]


state 92

    (20) elif_list_opt -> empty .

    ID              reduce using rule 20 (elif_list_opt -> empty .)
    IF              reduce using rule 20 (elif_list_opt -> empty .)
    FOR             reduce using rule 20 (elif_list_opt -> empty .)
    WHILE           reduce using rule 20 (elif_list_opt -> empty .)
    PRINT           reduce using rule 20 (elif_list_opt -> empty .)
    DEF             reduce using rule 20 (elif_list_opt -> empty .)
    RETURN          reduce using rule 20 (elif_list_opt -> empty .)
    BREAK           reduce using rule 20 (elif_list_opt -> empty .)
    $end            reduce using rule 20 (elif_list_opt -> empty .)
    ELIF            reduce using rule 20 (elif_list_opt -> empty .)
    ELSE            reduce using rule 20 (elif_list_opt -> empty .)


state 93

    (22) elif_list -> ELIF . condition COLON statement
    (36) condition -> . expression EQUALS expression
    (37) condition -> . expression LT expression
    (38) condition -> . expression GT expression
    (39) condition -> . expression LE expression
    (40) condition -> . expression GE
    (41) expression -> . MINUS expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression MODULO expression
    (47) expression -> . expression OR expression
    (48) expression -> . expression AND expression
    (49) expression -> . NOT expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . ID
    (52) expression -> . TRUE
    (53) expression -> . FALSE
    (54) expression -> . NUMBER
    (55) expression -> . FLOAT
    (56) expression -> . STRING

    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 30
    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36

    condition                      shift and go to state 100
    expression                     shift and go to state 27

state 94

    (23) for_statement -> FOR ID IN range statement .

    ID              reduce using rule 23 (for_statement -> FOR ID IN range statement .)
    IF              reduce using rule 23 (for_statement -> FOR ID IN range statement .)
    FOR             reduce using rule 23 (for_statement -> FOR ID IN range statement .)
    WHILE           reduce using rule 23 (for_statement -> FOR ID IN range statement .)
    PRINT           reduce using rule 23 (for_statement -> FOR ID IN range statement .)
    DEF             reduce using rule 23 (for_statement -> FOR ID IN range statement .)
    RETURN          reduce using rule 23 (for_statement -> FOR ID IN range statement .)
    BREAK           reduce using rule 23 (for_statement -> FOR ID IN range statement .)
    $end            reduce using rule 23 (for_statement -> FOR ID IN range statement .)
    ELIF            reduce using rule 23 (for_statement -> FOR ID IN range statement .)
    ELSE            reduce using rule 23 (for_statement -> FOR ID IN range statement .)


state 95

    (25) range -> RANGE LPAREN . expression COMMA expression RPAREN
    (41) expression -> . MINUS expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression MODULO expression
    (47) expression -> . expression OR expression
    (48) expression -> . expression AND expression
    (49) expression -> . NOT expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . ID
    (52) expression -> . TRUE
    (53) expression -> . FALSE
    (54) expression -> . NUMBER
    (55) expression -> . FLOAT
    (56) expression -> . STRING

    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 30
    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36

    expression                     shift and go to state 101

state 96

    (27) function_def -> DEF ID LPAREN param_list RPAREN . COLON statement_list

    COLON           shift and go to state 102


state 97

    (30) param_list -> param_list COMMA . ID

    ID              shift and go to state 103


state 98

    (17) if_statement -> IF condition COLON statement elif_list_opt ELSE . statement
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . for_statement
    (7) statement -> . while_statement
    (8) statement -> . print_statement
    (9) statement -> . function_def
    (10) statement -> . function_call
    (11) statement -> . return_statement
    (12) statement -> . break_statement
    (14) assignment -> . ID ASSIGN expression
    (15) assignment -> . ID PLUSEQUALS expression
    (16) assignment -> . ID MINUSEQUALS expression
    (17) if_statement -> . IF condition COLON statement elif_list_opt ELSE statement
    (18) if_statement -> . IF condition COLON statement elif_list_opt
    (23) for_statement -> . FOR ID IN range statement
    (24) while_statement -> . WHILE condition statement
    (26) print_statement -> . PRINT LPAREN expression RPAREN
    (27) function_def -> . DEF ID LPAREN param_list RPAREN COLON statement_list
    (28) function_call -> . ID LPAREN arg_list RPAREN
    (29) return_statement -> . RETURN expression
    (13) break_statement -> . BREAK

    ID              shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 17
    DEF             shift and go to state 18
    RETURN          shift and go to state 19
    BREAK           shift and go to state 20

    statement                      shift and go to state 104
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    for_statement                  shift and go to state 6
    while_statement                shift and go to state 7
    print_statement                shift and go to state 8
    function_def                   shift and go to state 9
    function_call                  shift and go to state 10
    return_statement               shift and go to state 11
    break_statement                shift and go to state 12

state 99

    (21) elif_list -> elif_list ELIF . condition COLON statement
    (36) condition -> . expression EQUALS expression
    (37) condition -> . expression LT expression
    (38) condition -> . expression GT expression
    (39) condition -> . expression LE expression
    (40) condition -> . expression GE
    (41) expression -> . MINUS expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression MODULO expression
    (47) expression -> . expression OR expression
    (48) expression -> . expression AND expression
    (49) expression -> . NOT expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . ID
    (52) expression -> . TRUE
    (53) expression -> . FALSE
    (54) expression -> . NUMBER
    (55) expression -> . FLOAT
    (56) expression -> . STRING

    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 30
    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36

    condition                      shift and go to state 105
    expression                     shift and go to state 27

state 100

    (22) elif_list -> ELIF condition . COLON statement

    COLON           shift and go to state 106


state 101

    (25) range -> RANGE LPAREN expression . COMMA expression RPAREN
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . MODULO expression
    (47) expression -> expression . OR expression
    (48) expression -> expression . AND expression

    COMMA           shift and go to state 107
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    MODULO          shift and go to state 58
    OR              shift and go to state 59
    AND             shift and go to state 60


state 102

    (27) function_def -> DEF ID LPAREN param_list RPAREN COLON . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . for_statement
    (7) statement -> . while_statement
    (8) statement -> . print_statement
    (9) statement -> . function_def
    (10) statement -> . function_call
    (11) statement -> . return_statement
    (12) statement -> . break_statement
    (14) assignment -> . ID ASSIGN expression
    (15) assignment -> . ID PLUSEQUALS expression
    (16) assignment -> . ID MINUSEQUALS expression
    (17) if_statement -> . IF condition COLON statement elif_list_opt ELSE statement
    (18) if_statement -> . IF condition COLON statement elif_list_opt
    (23) for_statement -> . FOR ID IN range statement
    (24) while_statement -> . WHILE condition statement
    (26) print_statement -> . PRINT LPAREN expression RPAREN
    (27) function_def -> . DEF ID LPAREN param_list RPAREN COLON statement_list
    (28) function_call -> . ID LPAREN arg_list RPAREN
    (29) return_statement -> . RETURN expression
    (13) break_statement -> . BREAK

    ID              shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 17
    DEF             shift and go to state 18
    RETURN          shift and go to state 19
    BREAK           shift and go to state 20

    statement_list                 shift and go to state 108
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    for_statement                  shift and go to state 6
    while_statement                shift and go to state 7
    print_statement                shift and go to state 8
    function_def                   shift and go to state 9
    function_call                  shift and go to state 10
    return_statement               shift and go to state 11
    break_statement                shift and go to state 12

state 103

    (30) param_list -> param_list COMMA ID .

    RPAREN          reduce using rule 30 (param_list -> param_list COMMA ID .)
    COMMA           reduce using rule 30 (param_list -> param_list COMMA ID .)


state 104

    (17) if_statement -> IF condition COLON statement elif_list_opt ELSE statement .

    ID              reduce using rule 17 (if_statement -> IF condition COLON statement elif_list_opt ELSE statement .)
    IF              reduce using rule 17 (if_statement -> IF condition COLON statement elif_list_opt ELSE statement .)
    FOR             reduce using rule 17 (if_statement -> IF condition COLON statement elif_list_opt ELSE statement .)
    WHILE           reduce using rule 17 (if_statement -> IF condition COLON statement elif_list_opt ELSE statement .)
    PRINT           reduce using rule 17 (if_statement -> IF condition COLON statement elif_list_opt ELSE statement .)
    DEF             reduce using rule 17 (if_statement -> IF condition COLON statement elif_list_opt ELSE statement .)
    RETURN          reduce using rule 17 (if_statement -> IF condition COLON statement elif_list_opt ELSE statement .)
    BREAK           reduce using rule 17 (if_statement -> IF condition COLON statement elif_list_opt ELSE statement .)
    $end            reduce using rule 17 (if_statement -> IF condition COLON statement elif_list_opt ELSE statement .)
    ELIF            reduce using rule 17 (if_statement -> IF condition COLON statement elif_list_opt ELSE statement .)
    ELSE            reduce using rule 17 (if_statement -> IF condition COLON statement elif_list_opt ELSE statement .)


state 105

    (21) elif_list -> elif_list ELIF condition . COLON statement

    COLON           shift and go to state 109


state 106

    (22) elif_list -> ELIF condition COLON . statement
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . for_statement
    (7) statement -> . while_statement
    (8) statement -> . print_statement
    (9) statement -> . function_def
    (10) statement -> . function_call
    (11) statement -> . return_statement
    (12) statement -> . break_statement
    (14) assignment -> . ID ASSIGN expression
    (15) assignment -> . ID PLUSEQUALS expression
    (16) assignment -> . ID MINUSEQUALS expression
    (17) if_statement -> . IF condition COLON statement elif_list_opt ELSE statement
    (18) if_statement -> . IF condition COLON statement elif_list_opt
    (23) for_statement -> . FOR ID IN range statement
    (24) while_statement -> . WHILE condition statement
    (26) print_statement -> . PRINT LPAREN expression RPAREN
    (27) function_def -> . DEF ID LPAREN param_list RPAREN COLON statement_list
    (28) function_call -> . ID LPAREN arg_list RPAREN
    (29) return_statement -> . RETURN expression
    (13) break_statement -> . BREAK

    ID              shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 17
    DEF             shift and go to state 18
    RETURN          shift and go to state 19
    BREAK           shift and go to state 20

    statement                      shift and go to state 110
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    for_statement                  shift and go to state 6
    while_statement                shift and go to state 7
    print_statement                shift and go to state 8
    function_def                   shift and go to state 9
    function_call                  shift and go to state 10
    return_statement               shift and go to state 11
    break_statement                shift and go to state 12

state 107

    (25) range -> RANGE LPAREN expression COMMA . expression RPAREN
    (41) expression -> . MINUS expression
    (42) expression -> . expression PLUS expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression MULTIPLY expression
    (45) expression -> . expression DIVIDE expression
    (46) expression -> . expression MODULO expression
    (47) expression -> . expression OR expression
    (48) expression -> . expression AND expression
    (49) expression -> . NOT expression
    (50) expression -> . LPAREN expression RPAREN
    (51) expression -> . ID
    (52) expression -> . TRUE
    (53) expression -> . FALSE
    (54) expression -> . NUMBER
    (55) expression -> . FLOAT
    (56) expression -> . STRING

    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 30
    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT           shift and go to state 35
    STRING          shift and go to state 36

    expression                     shift and go to state 111

state 108

    (27) function_def -> DEF ID LPAREN param_list RPAREN COLON statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . for_statement
    (7) statement -> . while_statement
    (8) statement -> . print_statement
    (9) statement -> . function_def
    (10) statement -> . function_call
    (11) statement -> . return_statement
    (12) statement -> . break_statement
    (14) assignment -> . ID ASSIGN expression
    (15) assignment -> . ID PLUSEQUALS expression
    (16) assignment -> . ID MINUSEQUALS expression
    (17) if_statement -> . IF condition COLON statement elif_list_opt ELSE statement
    (18) if_statement -> . IF condition COLON statement elif_list_opt
    (23) for_statement -> . FOR ID IN range statement
    (24) while_statement -> . WHILE condition statement
    (26) print_statement -> . PRINT LPAREN expression RPAREN
    (27) function_def -> . DEF ID LPAREN param_list RPAREN COLON statement_list
    (28) function_call -> . ID LPAREN arg_list RPAREN
    (29) return_statement -> . RETURN expression
    (13) break_statement -> . BREAK

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
    $end            reduce using rule 27 (function_def -> DEF ID LPAREN param_list RPAREN COLON statement_list .)
    ELIF            reduce using rule 27 (function_def -> DEF ID LPAREN param_list RPAREN COLON statement_list .)
    ELSE            reduce using rule 27 (function_def -> DEF ID LPAREN param_list RPAREN COLON statement_list .)
    ID              shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 17
    DEF             shift and go to state 18
    RETURN          shift and go to state 19
    BREAK           shift and go to state 20

  ! ID              [ reduce using rule 27 (function_def -> DEF ID LPAREN param_list RPAREN COLON statement_list .) ]
  ! IF              [ reduce using rule 27 (function_def -> DEF ID LPAREN param_list RPAREN COLON statement_list .) ]
  ! FOR             [ reduce using rule 27 (function_def -> DEF ID LPAREN param_list RPAREN COLON statement_list .) ]
  ! WHILE           [ reduce using rule 27 (function_def -> DEF ID LPAREN param_list RPAREN COLON statement_list .) ]
  ! PRINT           [ reduce using rule 27 (function_def -> DEF ID LPAREN param_list RPAREN COLON statement_list .) ]
  ! DEF             [ reduce using rule 27 (function_def -> DEF ID LPAREN param_list RPAREN COLON statement_list .) ]
  ! RETURN          [ reduce using rule 27 (function_def -> DEF ID LPAREN param_list RPAREN COLON statement_list .) ]
  ! BREAK           [ reduce using rule 27 (function_def -> DEF ID LPAREN param_list RPAREN COLON statement_list .) ]

    statement                      shift and go to state 21
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    for_statement                  shift and go to state 6
    while_statement                shift and go to state 7
    print_statement                shift and go to state 8
    function_def                   shift and go to state 9
    function_call                  shift and go to state 10
    return_statement               shift and go to state 11
    break_statement                shift and go to state 12

state 109

    (21) elif_list -> elif_list ELIF condition COLON . statement
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . for_statement
    (7) statement -> . while_statement
    (8) statement -> . print_statement
    (9) statement -> . function_def
    (10) statement -> . function_call
    (11) statement -> . return_statement
    (12) statement -> . break_statement
    (14) assignment -> . ID ASSIGN expression
    (15) assignment -> . ID PLUSEQUALS expression
    (16) assignment -> . ID MINUSEQUALS expression
    (17) if_statement -> . IF condition COLON statement elif_list_opt ELSE statement
    (18) if_statement -> . IF condition COLON statement elif_list_opt
    (23) for_statement -> . FOR ID IN range statement
    (24) while_statement -> . WHILE condition statement
    (26) print_statement -> . PRINT LPAREN expression RPAREN
    (27) function_def -> . DEF ID LPAREN param_list RPAREN COLON statement_list
    (28) function_call -> . ID LPAREN arg_list RPAREN
    (29) return_statement -> . RETURN expression
    (13) break_statement -> . BREAK

    ID              shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 17
    DEF             shift and go to state 18
    RETURN          shift and go to state 19
    BREAK           shift and go to state 20

    statement                      shift and go to state 112
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    for_statement                  shift and go to state 6
    while_statement                shift and go to state 7
    print_statement                shift and go to state 8
    function_def                   shift and go to state 9
    function_call                  shift and go to state 10
    return_statement               shift and go to state 11
    break_statement                shift and go to state 12

state 110

    (22) elif_list -> ELIF condition COLON statement .

    ID              reduce using rule 22 (elif_list -> ELIF condition COLON statement .)
    IF              reduce using rule 22 (elif_list -> ELIF condition COLON statement .)
    FOR             reduce using rule 22 (elif_list -> ELIF condition COLON statement .)
    WHILE           reduce using rule 22 (elif_list -> ELIF condition COLON statement .)
    PRINT           reduce using rule 22 (elif_list -> ELIF condition COLON statement .)
    DEF             reduce using rule 22 (elif_list -> ELIF condition COLON statement .)
    RETURN          reduce using rule 22 (elif_list -> ELIF condition COLON statement .)
    BREAK           reduce using rule 22 (elif_list -> ELIF condition COLON statement .)
    $end            reduce using rule 22 (elif_list -> ELIF condition COLON statement .)
    ELIF            reduce using rule 22 (elif_list -> ELIF condition COLON statement .)
    ELSE            reduce using rule 22 (elif_list -> ELIF condition COLON statement .)


state 111

    (25) range -> RANGE LPAREN expression COMMA expression . RPAREN
    (42) expression -> expression . PLUS expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . MULTIPLY expression
    (45) expression -> expression . DIVIDE expression
    (46) expression -> expression . MODULO expression
    (47) expression -> expression . OR expression
    (48) expression -> expression . AND expression

    RPAREN          shift and go to state 113
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    MODULO          shift and go to state 58
    OR              shift and go to state 59
    AND             shift and go to state 60


state 112

    (21) elif_list -> elif_list ELIF condition COLON statement .

    ID              reduce using rule 21 (elif_list -> elif_list ELIF condition COLON statement .)
    IF              reduce using rule 21 (elif_list -> elif_list ELIF condition COLON statement .)
    FOR             reduce using rule 21 (elif_list -> elif_list ELIF condition COLON statement .)
    WHILE           reduce using rule 21 (elif_list -> elif_list ELIF condition COLON statement .)
    PRINT           reduce using rule 21 (elif_list -> elif_list ELIF condition COLON statement .)
    DEF             reduce using rule 21 (elif_list -> elif_list ELIF condition COLON statement .)
    RETURN          reduce using rule 21 (elif_list -> elif_list ELIF condition COLON statement .)
    BREAK           reduce using rule 21 (elif_list -> elif_list ELIF condition COLON statement .)
    $end            reduce using rule 21 (elif_list -> elif_list ELIF condition COLON statement .)
    ELIF            reduce using rule 21 (elif_list -> elif_list ELIF condition COLON statement .)
    ELSE            reduce using rule 21 (elif_list -> elif_list ELIF condition COLON statement .)


state 113

    (25) range -> RANGE LPAREN expression COMMA expression RPAREN .

    ID              reduce using rule 25 (range -> RANGE LPAREN expression COMMA expression RPAREN .)
    IF              reduce using rule 25 (range -> RANGE LPAREN expression COMMA expression RPAREN .)
    FOR             reduce using rule 25 (range -> RANGE LPAREN expression COMMA expression RPAREN .)
    WHILE           reduce using rule 25 (range -> RANGE LPAREN expression COMMA expression RPAREN .)
    PRINT           reduce using rule 25 (range -> RANGE LPAREN expression COMMA expression RPAREN .)
    DEF             reduce using rule 25 (range -> RANGE LPAREN expression COMMA expression RPAREN .)
    RETURN          reduce using rule 25 (range -> RANGE LPAREN expression COMMA expression RPAREN .)
    BREAK           reduce using rule 25 (range -> RANGE LPAREN expression COMMA expression RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELIF in state 70 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 90 resolved as shift
WARNING: shift/reduce conflict for ELIF in state 91 resolved as shift
WARNING: shift/reduce conflict for ID in state 108 resolved as shift
WARNING: shift/reduce conflict for IF in state 108 resolved as shift
WARNING: shift/reduce conflict for FOR in state 108 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 108 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 108 resolved as shift
WARNING: shift/reduce conflict for DEF in state 108 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 108 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 108 resolved as shift
