Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     statement -> ID EQUALS expression
Rule 3     statement -> ID LPAREN ID RPAREN
Rule 4     expression -> LPAREN expression RPAREN
Rule 5     expression -> NUMBER
Rule 6     expression -> FLOAT
Rule 7     expression -> ID
Rule 8     expression -> MINUS expression
Rule 9     expression -> expression PLUS expression
Rule 10    expression -> expression MINUS expression
Rule 11    expression -> expression MULTIPLY expression
Rule 12    expression -> expression DIVIDE expression
Rule 13    expression -> STRING
Rule 14    statement -> END

Terminals, with rules where they appear

DIVIDE               : 12
END                  : 14
EQUALS               : 2
FLOAT                : 6
ID                   : 2 3 3 7
LPAREN               : 3 4
MINUS                : 8 10
MULTIPLY             : 11
NUMBER               : 5
PLUS                 : 9
RPAREN               : 3 4
STRING               : 13
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 4 8 9 9 10 10 11 11 12 12
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (2) statement -> . ID EQUALS expression
    (3) statement -> . ID LPAREN ID RPAREN
    (14) statement -> . END
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . NUMBER
    (6) expression -> . FLOAT
    (7) expression -> . ID
    (8) expression -> . MINUS expression
    (9) expression -> . expression PLUS expression
    (10) expression -> . expression MINUS expression
    (11) expression -> . expression MULTIPLY expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . STRING

    ID              shift and go to state 3
    END             shift and go to state 5
    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 6
    FLOAT           shift and go to state 7
    MINUS           shift and go to state 8
    STRING          shift and go to state 9

    statement                      shift and go to state 1
    expression                     shift and go to state 2

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .
    (9) expression -> expression . PLUS expression
    (10) expression -> expression . MINUS expression
    (11) expression -> expression . MULTIPLY expression
    (12) expression -> expression . DIVIDE expression

    $end            reduce using rule 1 (statement -> expression .)
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    MULTIPLY        shift and go to state 12
    DIVIDE          shift and go to state 13


state 3

    (2) statement -> ID . EQUALS expression
    (3) statement -> ID . LPAREN ID RPAREN
    (7) expression -> ID .

    EQUALS          shift and go to state 14
    LPAREN          shift and go to state 15
    PLUS            reduce using rule 7 (expression -> ID .)
    MINUS           reduce using rule 7 (expression -> ID .)
    MULTIPLY        reduce using rule 7 (expression -> ID .)
    DIVIDE          reduce using rule 7 (expression -> ID .)
    $end            reduce using rule 7 (expression -> ID .)


state 4

    (4) expression -> LPAREN . expression RPAREN
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . NUMBER
    (6) expression -> . FLOAT
    (7) expression -> . ID
    (8) expression -> . MINUS expression
    (9) expression -> . expression PLUS expression
    (10) expression -> . expression MINUS expression
    (11) expression -> . expression MULTIPLY expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . STRING

    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 6
    FLOAT           shift and go to state 7
    ID              shift and go to state 17
    MINUS           shift and go to state 8
    STRING          shift and go to state 9

    expression                     shift and go to state 16

state 5

    (14) statement -> END .

    $end            reduce using rule 14 (statement -> END .)


state 6

    (5) expression -> NUMBER .

    PLUS            reduce using rule 5 (expression -> NUMBER .)
    MINUS           reduce using rule 5 (expression -> NUMBER .)
    MULTIPLY        reduce using rule 5 (expression -> NUMBER .)
    DIVIDE          reduce using rule 5 (expression -> NUMBER .)
    $end            reduce using rule 5 (expression -> NUMBER .)
    RPAREN          reduce using rule 5 (expression -> NUMBER .)


state 7

    (6) expression -> FLOAT .

    PLUS            reduce using rule 6 (expression -> FLOAT .)
    MINUS           reduce using rule 6 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 6 (expression -> FLOAT .)
    DIVIDE          reduce using rule 6 (expression -> FLOAT .)
    $end            reduce using rule 6 (expression -> FLOAT .)
    RPAREN          reduce using rule 6 (expression -> FLOAT .)


state 8

    (8) expression -> MINUS . expression
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . NUMBER
    (6) expression -> . FLOAT
    (7) expression -> . ID
    (8) expression -> . MINUS expression
    (9) expression -> . expression PLUS expression
    (10) expression -> . expression MINUS expression
    (11) expression -> . expression MULTIPLY expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . STRING

    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 6
    FLOAT           shift and go to state 7
    ID              shift and go to state 17
    MINUS           shift and go to state 8
    STRING          shift and go to state 9

    expression                     shift and go to state 18

state 9

    (13) expression -> STRING .

    PLUS            reduce using rule 13 (expression -> STRING .)
    MINUS           reduce using rule 13 (expression -> STRING .)
    MULTIPLY        reduce using rule 13 (expression -> STRING .)
    DIVIDE          reduce using rule 13 (expression -> STRING .)
    $end            reduce using rule 13 (expression -> STRING .)
    RPAREN          reduce using rule 13 (expression -> STRING .)


state 10

    (9) expression -> expression PLUS . expression
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . NUMBER
    (6) expression -> . FLOAT
    (7) expression -> . ID
    (8) expression -> . MINUS expression
    (9) expression -> . expression PLUS expression
    (10) expression -> . expression MINUS expression
    (11) expression -> . expression MULTIPLY expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . STRING

    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 6
    FLOAT           shift and go to state 7
    ID              shift and go to state 17
    MINUS           shift and go to state 8
    STRING          shift and go to state 9

    expression                     shift and go to state 19

state 11

    (10) expression -> expression MINUS . expression
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . NUMBER
    (6) expression -> . FLOAT
    (7) expression -> . ID
    (8) expression -> . MINUS expression
    (9) expression -> . expression PLUS expression
    (10) expression -> . expression MINUS expression
    (11) expression -> . expression MULTIPLY expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . STRING

    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 6
    FLOAT           shift and go to state 7
    ID              shift and go to state 17
    MINUS           shift and go to state 8
    STRING          shift and go to state 9

    expression                     shift and go to state 20

state 12

    (11) expression -> expression MULTIPLY . expression
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . NUMBER
    (6) expression -> . FLOAT
    (7) expression -> . ID
    (8) expression -> . MINUS expression
    (9) expression -> . expression PLUS expression
    (10) expression -> . expression MINUS expression
    (11) expression -> . expression MULTIPLY expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . STRING

    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 6
    FLOAT           shift and go to state 7
    ID              shift and go to state 17
    MINUS           shift and go to state 8
    STRING          shift and go to state 9

    expression                     shift and go to state 21

state 13

    (12) expression -> expression DIVIDE . expression
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . NUMBER
    (6) expression -> . FLOAT
    (7) expression -> . ID
    (8) expression -> . MINUS expression
    (9) expression -> . expression PLUS expression
    (10) expression -> . expression MINUS expression
    (11) expression -> . expression MULTIPLY expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . STRING

    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 6
    FLOAT           shift and go to state 7
    ID              shift and go to state 17
    MINUS           shift and go to state 8
    STRING          shift and go to state 9

    expression                     shift and go to state 22

state 14

    (2) statement -> ID EQUALS . expression
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . NUMBER
    (6) expression -> . FLOAT
    (7) expression -> . ID
    (8) expression -> . MINUS expression
    (9) expression -> . expression PLUS expression
    (10) expression -> . expression MINUS expression
    (11) expression -> . expression MULTIPLY expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . STRING

    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 6
    FLOAT           shift and go to state 7
    ID              shift and go to state 17
    MINUS           shift and go to state 8
    STRING          shift and go to state 9

    expression                     shift and go to state 23

state 15

    (3) statement -> ID LPAREN . ID RPAREN

    ID              shift and go to state 24


state 16

    (4) expression -> LPAREN expression . RPAREN
    (9) expression -> expression . PLUS expression
    (10) expression -> expression . MINUS expression
    (11) expression -> expression . MULTIPLY expression
    (12) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 25
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    MULTIPLY        shift and go to state 12
    DIVIDE          shift and go to state 13


state 17

    (7) expression -> ID .

    RPAREN          reduce using rule 7 (expression -> ID .)
    PLUS            reduce using rule 7 (expression -> ID .)
    MINUS           reduce using rule 7 (expression -> ID .)
    MULTIPLY        reduce using rule 7 (expression -> ID .)
    DIVIDE          reduce using rule 7 (expression -> ID .)
    $end            reduce using rule 7 (expression -> ID .)


state 18

    (8) expression -> MINUS expression .
    (9) expression -> expression . PLUS expression
    (10) expression -> expression . MINUS expression
    (11) expression -> expression . MULTIPLY expression
    (12) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 8 (expression -> MINUS expression .)
    MINUS           reduce using rule 8 (expression -> MINUS expression .)
    $end            reduce using rule 8 (expression -> MINUS expression .)
    RPAREN          reduce using rule 8 (expression -> MINUS expression .)
    MULTIPLY        shift and go to state 12
    DIVIDE          shift and go to state 13

  ! MULTIPLY        [ reduce using rule 8 (expression -> MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 8 (expression -> MINUS expression .) ]
  ! PLUS            [ shift and go to state 10 ]
  ! MINUS           [ shift and go to state 11 ]


state 19

    (9) expression -> expression PLUS expression .
    (9) expression -> expression . PLUS expression
    (10) expression -> expression . MINUS expression
    (11) expression -> expression . MULTIPLY expression
    (12) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 9 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 9 (expression -> expression PLUS expression .)
    $end            reduce using rule 9 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 9 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 12
    DIVIDE          shift and go to state 13

  ! MULTIPLY        [ reduce using rule 9 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 9 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 10 ]
  ! MINUS           [ shift and go to state 11 ]


state 20

    (10) expression -> expression MINUS expression .
    (9) expression -> expression . PLUS expression
    (10) expression -> expression . MINUS expression
    (11) expression -> expression . MULTIPLY expression
    (12) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 10 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 10 (expression -> expression MINUS expression .)
    $end            reduce using rule 10 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 10 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 12
    DIVIDE          shift and go to state 13

  ! MULTIPLY        [ reduce using rule 10 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 10 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 10 ]
  ! MINUS           [ shift and go to state 11 ]


state 21

    (11) expression -> expression MULTIPLY expression .
    (9) expression -> expression . PLUS expression
    (10) expression -> expression . MINUS expression
    (11) expression -> expression . MULTIPLY expression
    (12) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 11 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 11 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 11 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 11 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 11 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 11 (expression -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 10 ]
  ! MINUS           [ shift and go to state 11 ]
  ! MULTIPLY        [ shift and go to state 12 ]
  ! DIVIDE          [ shift and go to state 13 ]


state 22

    (12) expression -> expression DIVIDE expression .
    (9) expression -> expression . PLUS expression
    (10) expression -> expression . MINUS expression
    (11) expression -> expression . MULTIPLY expression
    (12) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 12 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 12 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 12 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 12 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 12 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 12 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 10 ]
  ! MINUS           [ shift and go to state 11 ]
  ! MULTIPLY        [ shift and go to state 12 ]
  ! DIVIDE          [ shift and go to state 13 ]


state 23

    (2) statement -> ID EQUALS expression .
    (9) expression -> expression . PLUS expression
    (10) expression -> expression . MINUS expression
    (11) expression -> expression . MULTIPLY expression
    (12) expression -> expression . DIVIDE expression

    $end            reduce using rule 2 (statement -> ID EQUALS expression .)
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    MULTIPLY        shift and go to state 12
    DIVIDE          shift and go to state 13


state 24

    (3) statement -> ID LPAREN ID . RPAREN

    RPAREN          shift and go to state 26


state 25

    (4) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 4 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 4 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 4 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 4 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 4 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 4 (expression -> LPAREN expression RPAREN .)


state 26

    (3) statement -> ID LPAREN ID RPAREN .

    $end            reduce using rule 3 (statement -> ID LPAREN ID RPAREN .)

