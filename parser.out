Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement_list statement
Rule 3     statement_list -> statement
Rule 4     statement -> assignment
Rule 5     statement -> if_statement
Rule 6     statement -> for_statement
Rule 7     statement -> while_statement
Rule 8     statement -> print_statement
Rule 9     statement -> function_def
Rule 10    statement -> function_call
Rule 11    statement -> return_statement
Rule 12    assignment -> ID ASSIGN expression
Rule 13    if_statement -> IF condition COLON statement elif_list_opt ELSE statement
Rule 14    if_statement -> IF condition COLON statement elif_list_opt
Rule 15    elif_list_opt -> elif_list
Rule 16    elif_list_opt -> empty
Rule 17    elif_list -> elif_list ELIF condition COLON statement
Rule 18    elif_list -> ELIF condition COLON statement
Rule 19    for_statement -> FOR ID IN range statement
Rule 20    while_statement -> WHILE condition statement
Rule 21    range -> RANGE LPAREN expression COMMA expression RPAREN
Rule 22    print_statement -> PRINT LPAREN expression RPAREN
Rule 23    function_def -> DEF ID LPAREN param_list RPAREN COLON statement_list
Rule 24    function_call -> ID LPAREN arg_list RPAREN
Rule 25    return_statement -> RETURN expression
Rule 26    param_list -> param_list COMMA ID
Rule 27    param_list -> ID
Rule 28    param_list -> empty
Rule 29    arg_list -> arg_list COMMA expression
Rule 30    arg_list -> expression
Rule 31    arg_list -> empty
Rule 32    condition -> expression EQUALS expression
Rule 33    condition -> expression LT expression
Rule 34    condition -> expression GT expression
Rule 35    condition -> expression LE expression
Rule 36    condition -> expression GE
Rule 37    expression -> MINUS expression
Rule 38    expression -> expression PLUS expression
Rule 39    expression -> expression MINUS expression
Rule 40    expression -> expression MULTIPLY expression
Rule 41    expression -> expression DIVIDE expression
Rule 42    expression -> expression MODULO expression
Rule 43    expression -> expression OR expression
Rule 44    expression -> expression AND expression
Rule 45    expression -> NOT expression
Rule 46    expression -> LPAREN expression RPAREN
Rule 47    expression -> ID
Rule 48    expression -> TRUE
Rule 49    expression -> FALSE
Rule 50    expression -> NUMBER
Rule 51    expression -> FLOAT
Rule 52    expression -> STRING
Rule 53    empty -> <empty>

Terminals, with rules where they appear

AND                  : 44
ASSIGN               : 12
COLON                : 13 14 17 18 23
COMMA                : 21 26 29
DEF                  : 23
DIVIDE               : 41
ELIF                 : 17 18
ELSE                 : 13
EQUALS               : 32
FALSE                : 49
FLOAT                : 51
FOR                  : 19
GE                   : 36
GT                   : 34
ID                   : 12 19 23 24 26 27 47
IF                   : 13 14
IN                   : 19
LE                   : 35
LPAREN               : 21 22 23 24 46
LT                   : 33
MINUS                : 37 39
MODULO               : 42
MULTIPLY             : 40
NOT                  : 45
NUMBER               : 50
OR                   : 43
PLUS                 : 38
PRINT                : 22
RANGE                : 21
RETURN               : 25
RPAREN               : 21 22 23 24 46
STRING               : 52
TRUE                 : 48
WHILE                : 20
error                : 

Nonterminals, with rules where they appear

arg_list             : 24 29
assignment           : 4
condition            : 13 14 17 18 20
elif_list            : 15 17
elif_list_opt        : 13 14
empty                : 16 28 31
expression           : 12 21 21 22 25 29 30 32 32 33 33 34 34 35 35 36 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 46
for_statement        : 6
function_call        : 10
function_def         : 9
if_statement         : 5
param_list           : 23 26
print_statement      : 8
program              : 0
range                : 19
return_statement     : 11
statement            : 2 3 13 13 14 17 18 19 20
statement_list       : 1 2 23
while_statement      : 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . for_statement
    (7) statement -> . while_statement
    (8) statement -> . print_statement
    (9) statement -> . function_def
    (10) statement -> . function_call
    (11) statement -> . return_statement
    (12) assignment -> . ID ASSIGN expression
    (13) if_statement -> . IF condition COLON statement elif_list_opt ELSE statement
    (14) if_statement -> . IF condition COLON statement elif_list_opt
    (19) for_statement -> . FOR ID IN range statement
    (20) while_statement -> . WHILE condition statement
    (22) print_statement -> . PRINT LPAREN expression RPAREN
    (23) function_def -> . DEF ID LPAREN param_list RPAREN COLON statement_list
    (24) function_call -> . ID LPAREN arg_list RPAREN
    (25) return_statement -> . RETURN expression

    ID              shift and go to state 12
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 15
    PRINT           shift and go to state 16
    DEF             shift and go to state 17
    RETURN          shift and go to state 18

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    for_statement                  shift and go to state 6
    while_statement                shift and go to state 7
    print_statement                shift and go to state 8
    function_def                   shift and go to state 9
    function_call                  shift and go to state 10
    return_statement               shift and go to state 11

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . for_statement
    (7) statement -> . while_statement
    (8) statement -> . print_statement
    (9) statement -> . function_def
    (10) statement -> . function_call
    (11) statement -> . return_statement
    (12) assignment -> . ID ASSIGN expression
    (13) if_statement -> . IF condition COLON statement elif_list_opt ELSE statement
    (14) if_statement -> . IF condition COLON statement elif_list_opt
    (19) for_statement -> . FOR ID IN range statement
    (20) while_statement -> . WHILE condition statement
    (22) print_statement -> . PRINT LPAREN expression RPAREN
    (23) function_def -> . DEF ID LPAREN param_list RPAREN COLON statement_list
    (24) function_call -> . ID LPAREN arg_list RPAREN
    (25) return_statement -> . RETURN expression

    $end            reduce using rule 1 (program -> statement_list .)
    ID              shift and go to state 12
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 15
    PRINT           shift and go to state 16
    DEF             shift and go to state 17
    RETURN          shift and go to state 18

    statement                      shift and go to state 19
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    for_statement                  shift and go to state 6
    while_statement                shift and go to state 7
    print_statement                shift and go to state 8
    function_def                   shift and go to state 9
    function_call                  shift and go to state 10
    return_statement               shift and go to state 11

state 3

    (3) statement_list -> statement .

    ID              reduce using rule 3 (statement_list -> statement .)
    IF              reduce using rule 3 (statement_list -> statement .)
    FOR             reduce using rule 3 (statement_list -> statement .)
    WHILE           reduce using rule 3 (statement_list -> statement .)
    PRINT           reduce using rule 3 (statement_list -> statement .)
    DEF             reduce using rule 3 (statement_list -> statement .)
    RETURN          reduce using rule 3 (statement_list -> statement .)
    $end            reduce using rule 3 (statement_list -> statement .)
    ELIF            reduce using rule 3 (statement_list -> statement .)
    ELSE            reduce using rule 3 (statement_list -> statement .)


state 4

    (4) statement -> assignment .

    ID              reduce using rule 4 (statement -> assignment .)
    IF              reduce using rule 4 (statement -> assignment .)
    FOR             reduce using rule 4 (statement -> assignment .)
    WHILE           reduce using rule 4 (statement -> assignment .)
    PRINT           reduce using rule 4 (statement -> assignment .)
    DEF             reduce using rule 4 (statement -> assignment .)
    RETURN          reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)
    ELIF            reduce using rule 4 (statement -> assignment .)
    ELSE            reduce using rule 4 (statement -> assignment .)


state 5

    (5) statement -> if_statement .

    ID              reduce using rule 5 (statement -> if_statement .)
    IF              reduce using rule 5 (statement -> if_statement .)
    FOR             reduce using rule 5 (statement -> if_statement .)
    WHILE           reduce using rule 5 (statement -> if_statement .)
    PRINT           reduce using rule 5 (statement -> if_statement .)
    DEF             reduce using rule 5 (statement -> if_statement .)
    RETURN          reduce using rule 5 (statement -> if_statement .)
    $end            reduce using rule 5 (statement -> if_statement .)
    ELIF            reduce using rule 5 (statement -> if_statement .)
    ELSE            reduce using rule 5 (statement -> if_statement .)


state 6

    (6) statement -> for_statement .

    ID              reduce using rule 6 (statement -> for_statement .)
    IF              reduce using rule 6 (statement -> for_statement .)
    FOR             reduce using rule 6 (statement -> for_statement .)
    WHILE           reduce using rule 6 (statement -> for_statement .)
    PRINT           reduce using rule 6 (statement -> for_statement .)
    DEF             reduce using rule 6 (statement -> for_statement .)
    RETURN          reduce using rule 6 (statement -> for_statement .)
    $end            reduce using rule 6 (statement -> for_statement .)
    ELIF            reduce using rule 6 (statement -> for_statement .)
    ELSE            reduce using rule 6 (statement -> for_statement .)


state 7

    (7) statement -> while_statement .

    ID              reduce using rule 7 (statement -> while_statement .)
    IF              reduce using rule 7 (statement -> while_statement .)
    FOR             reduce using rule 7 (statement -> while_statement .)
    WHILE           reduce using rule 7 (statement -> while_statement .)
    PRINT           reduce using rule 7 (statement -> while_statement .)
    DEF             reduce using rule 7 (statement -> while_statement .)
    RETURN          reduce using rule 7 (statement -> while_statement .)
    $end            reduce using rule 7 (statement -> while_statement .)
    ELIF            reduce using rule 7 (statement -> while_statement .)
    ELSE            reduce using rule 7 (statement -> while_statement .)


state 8

    (8) statement -> print_statement .

    ID              reduce using rule 8 (statement -> print_statement .)
    IF              reduce using rule 8 (statement -> print_statement .)
    FOR             reduce using rule 8 (statement -> print_statement .)
    WHILE           reduce using rule 8 (statement -> print_statement .)
    PRINT           reduce using rule 8 (statement -> print_statement .)
    DEF             reduce using rule 8 (statement -> print_statement .)
    RETURN          reduce using rule 8 (statement -> print_statement .)
    $end            reduce using rule 8 (statement -> print_statement .)
    ELIF            reduce using rule 8 (statement -> print_statement .)
    ELSE            reduce using rule 8 (statement -> print_statement .)


state 9

    (9) statement -> function_def .

    ID              reduce using rule 9 (statement -> function_def .)
    IF              reduce using rule 9 (statement -> function_def .)
    FOR             reduce using rule 9 (statement -> function_def .)
    WHILE           reduce using rule 9 (statement -> function_def .)
    PRINT           reduce using rule 9 (statement -> function_def .)
    DEF             reduce using rule 9 (statement -> function_def .)
    RETURN          reduce using rule 9 (statement -> function_def .)
    $end            reduce using rule 9 (statement -> function_def .)
    ELIF            reduce using rule 9 (statement -> function_def .)
    ELSE            reduce using rule 9 (statement -> function_def .)


state 10

    (10) statement -> function_call .

    ID              reduce using rule 10 (statement -> function_call .)
    IF              reduce using rule 10 (statement -> function_call .)
    FOR             reduce using rule 10 (statement -> function_call .)
    WHILE           reduce using rule 10 (statement -> function_call .)
    PRINT           reduce using rule 10 (statement -> function_call .)
    DEF             reduce using rule 10 (statement -> function_call .)
    RETURN          reduce using rule 10 (statement -> function_call .)
    $end            reduce using rule 10 (statement -> function_call .)
    ELIF            reduce using rule 10 (statement -> function_call .)
    ELSE            reduce using rule 10 (statement -> function_call .)


state 11

    (11) statement -> return_statement .

    ID              reduce using rule 11 (statement -> return_statement .)
    IF              reduce using rule 11 (statement -> return_statement .)
    FOR             reduce using rule 11 (statement -> return_statement .)
    WHILE           reduce using rule 11 (statement -> return_statement .)
    PRINT           reduce using rule 11 (statement -> return_statement .)
    DEF             reduce using rule 11 (statement -> return_statement .)
    RETURN          reduce using rule 11 (statement -> return_statement .)
    $end            reduce using rule 11 (statement -> return_statement .)
    ELIF            reduce using rule 11 (statement -> return_statement .)
    ELSE            reduce using rule 11 (statement -> return_statement .)


state 12

    (12) assignment -> ID . ASSIGN expression
    (24) function_call -> ID . LPAREN arg_list RPAREN

    ASSIGN          shift and go to state 20
    LPAREN          shift and go to state 21


state 13

    (13) if_statement -> IF . condition COLON statement elif_list_opt ELSE statement
    (14) if_statement -> IF . condition COLON statement elif_list_opt
    (32) condition -> . expression EQUALS expression
    (33) condition -> . expression LT expression
    (34) condition -> . expression GT expression
    (35) condition -> . expression LE expression
    (36) condition -> . expression GE
    (37) expression -> . MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression MULTIPLY expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression MODULO expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . NOT expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . ID
    (48) expression -> . TRUE
    (49) expression -> . FALSE
    (50) expression -> . NUMBER
    (51) expression -> . FLOAT
    (52) expression -> . STRING

    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    LPAREN          shift and go to state 26
    ID              shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32

    condition                      shift and go to state 22
    expression                     shift and go to state 23

state 14

    (19) for_statement -> FOR . ID IN range statement

    ID              shift and go to state 33


state 15

    (20) while_statement -> WHILE . condition statement
    (32) condition -> . expression EQUALS expression
    (33) condition -> . expression LT expression
    (34) condition -> . expression GT expression
    (35) condition -> . expression LE expression
    (36) condition -> . expression GE
    (37) expression -> . MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression MULTIPLY expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression MODULO expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . NOT expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . ID
    (48) expression -> . TRUE
    (49) expression -> . FALSE
    (50) expression -> . NUMBER
    (51) expression -> . FLOAT
    (52) expression -> . STRING

    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    LPAREN          shift and go to state 26
    ID              shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32

    condition                      shift and go to state 34
    expression                     shift and go to state 23

state 16

    (22) print_statement -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 35


state 17

    (23) function_def -> DEF . ID LPAREN param_list RPAREN COLON statement_list

    ID              shift and go to state 36


state 18

    (25) return_statement -> RETURN . expression
    (37) expression -> . MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression MULTIPLY expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression MODULO expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . NOT expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . ID
    (48) expression -> . TRUE
    (49) expression -> . FALSE
    (50) expression -> . NUMBER
    (51) expression -> . FLOAT
    (52) expression -> . STRING

    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    LPAREN          shift and go to state 26
    ID              shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32

    expression                     shift and go to state 37

state 19

    (2) statement_list -> statement_list statement .

    ID              reduce using rule 2 (statement_list -> statement_list statement .)
    IF              reduce using rule 2 (statement_list -> statement_list statement .)
    FOR             reduce using rule 2 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 2 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 2 (statement_list -> statement_list statement .)
    DEF             reduce using rule 2 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)
    ELIF            reduce using rule 2 (statement_list -> statement_list statement .)
    ELSE            reduce using rule 2 (statement_list -> statement_list statement .)


state 20

    (12) assignment -> ID ASSIGN . expression
    (37) expression -> . MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression MULTIPLY expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression MODULO expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . NOT expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . ID
    (48) expression -> . TRUE
    (49) expression -> . FALSE
    (50) expression -> . NUMBER
    (51) expression -> . FLOAT
    (52) expression -> . STRING

    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    LPAREN          shift and go to state 26
    ID              shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32

    expression                     shift and go to state 38

state 21

    (24) function_call -> ID LPAREN . arg_list RPAREN
    (29) arg_list -> . arg_list COMMA expression
    (30) arg_list -> . expression
    (31) arg_list -> . empty
    (37) expression -> . MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression MULTIPLY expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression MODULO expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . NOT expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . ID
    (48) expression -> . TRUE
    (49) expression -> . FALSE
    (50) expression -> . NUMBER
    (51) expression -> . FLOAT
    (52) expression -> . STRING
    (53) empty -> .

    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    LPAREN          shift and go to state 26
    ID              shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32
    RPAREN          reduce using rule 53 (empty -> .)
    COMMA           reduce using rule 53 (empty -> .)

    arg_list                       shift and go to state 39
    expression                     shift and go to state 40
    empty                          shift and go to state 41

state 22

    (13) if_statement -> IF condition . COLON statement elif_list_opt ELSE statement
    (14) if_statement -> IF condition . COLON statement elif_list_opt

    COLON           shift and go to state 42


state 23

    (32) condition -> expression . EQUALS expression
    (33) condition -> expression . LT expression
    (34) condition -> expression . GT expression
    (35) condition -> expression . LE expression
    (36) condition -> expression . GE
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . MULTIPLY expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . MODULO expression
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression

    EQUALS          shift and go to state 43
    LT              shift and go to state 44
    GT              shift and go to state 45
    LE              shift and go to state 46
    GE              shift and go to state 47
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    OR              shift and go to state 53
    AND             shift and go to state 54


state 24

    (37) expression -> MINUS . expression
    (37) expression -> . MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression MULTIPLY expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression MODULO expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . NOT expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . ID
    (48) expression -> . TRUE
    (49) expression -> . FALSE
    (50) expression -> . NUMBER
    (51) expression -> . FLOAT
    (52) expression -> . STRING

    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    LPAREN          shift and go to state 26
    ID              shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32

    expression                     shift and go to state 55

state 25

    (45) expression -> NOT . expression
    (37) expression -> . MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression MULTIPLY expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression MODULO expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . NOT expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . ID
    (48) expression -> . TRUE
    (49) expression -> . FALSE
    (50) expression -> . NUMBER
    (51) expression -> . FLOAT
    (52) expression -> . STRING

    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    LPAREN          shift and go to state 26
    ID              shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32

    expression                     shift and go to state 56

state 26

    (46) expression -> LPAREN . expression RPAREN
    (37) expression -> . MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression MULTIPLY expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression MODULO expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . NOT expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . ID
    (48) expression -> . TRUE
    (49) expression -> . FALSE
    (50) expression -> . NUMBER
    (51) expression -> . FLOAT
    (52) expression -> . STRING

    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    LPAREN          shift and go to state 26
    ID              shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32

    expression                     shift and go to state 57

state 27

    (47) expression -> ID .

    EQUALS          reduce using rule 47 (expression -> ID .)
    LT              reduce using rule 47 (expression -> ID .)
    GT              reduce using rule 47 (expression -> ID .)
    LE              reduce using rule 47 (expression -> ID .)
    GE              reduce using rule 47 (expression -> ID .)
    PLUS            reduce using rule 47 (expression -> ID .)
    MINUS           reduce using rule 47 (expression -> ID .)
    MULTIPLY        reduce using rule 47 (expression -> ID .)
    DIVIDE          reduce using rule 47 (expression -> ID .)
    MODULO          reduce using rule 47 (expression -> ID .)
    OR              reduce using rule 47 (expression -> ID .)
    AND             reduce using rule 47 (expression -> ID .)
    ID              reduce using rule 47 (expression -> ID .)
    IF              reduce using rule 47 (expression -> ID .)
    FOR             reduce using rule 47 (expression -> ID .)
    WHILE           reduce using rule 47 (expression -> ID .)
    PRINT           reduce using rule 47 (expression -> ID .)
    DEF             reduce using rule 47 (expression -> ID .)
    RETURN          reduce using rule 47 (expression -> ID .)
    $end            reduce using rule 47 (expression -> ID .)
    ELIF            reduce using rule 47 (expression -> ID .)
    ELSE            reduce using rule 47 (expression -> ID .)
    RPAREN          reduce using rule 47 (expression -> ID .)
    COMMA           reduce using rule 47 (expression -> ID .)
    COLON           reduce using rule 47 (expression -> ID .)


state 28

    (48) expression -> TRUE .

    EQUALS          reduce using rule 48 (expression -> TRUE .)
    LT              reduce using rule 48 (expression -> TRUE .)
    GT              reduce using rule 48 (expression -> TRUE .)
    LE              reduce using rule 48 (expression -> TRUE .)
    GE              reduce using rule 48 (expression -> TRUE .)
    PLUS            reduce using rule 48 (expression -> TRUE .)
    MINUS           reduce using rule 48 (expression -> TRUE .)
    MULTIPLY        reduce using rule 48 (expression -> TRUE .)
    DIVIDE          reduce using rule 48 (expression -> TRUE .)
    MODULO          reduce using rule 48 (expression -> TRUE .)
    OR              reduce using rule 48 (expression -> TRUE .)
    AND             reduce using rule 48 (expression -> TRUE .)
    ID              reduce using rule 48 (expression -> TRUE .)
    IF              reduce using rule 48 (expression -> TRUE .)
    FOR             reduce using rule 48 (expression -> TRUE .)
    WHILE           reduce using rule 48 (expression -> TRUE .)
    PRINT           reduce using rule 48 (expression -> TRUE .)
    DEF             reduce using rule 48 (expression -> TRUE .)
    RETURN          reduce using rule 48 (expression -> TRUE .)
    $end            reduce using rule 48 (expression -> TRUE .)
    ELIF            reduce using rule 48 (expression -> TRUE .)
    ELSE            reduce using rule 48 (expression -> TRUE .)
    RPAREN          reduce using rule 48 (expression -> TRUE .)
    COMMA           reduce using rule 48 (expression -> TRUE .)
    COLON           reduce using rule 48 (expression -> TRUE .)


state 29

    (49) expression -> FALSE .

    EQUALS          reduce using rule 49 (expression -> FALSE .)
    LT              reduce using rule 49 (expression -> FALSE .)
    GT              reduce using rule 49 (expression -> FALSE .)
    LE              reduce using rule 49 (expression -> FALSE .)
    GE              reduce using rule 49 (expression -> FALSE .)
    PLUS            reduce using rule 49 (expression -> FALSE .)
    MINUS           reduce using rule 49 (expression -> FALSE .)
    MULTIPLY        reduce using rule 49 (expression -> FALSE .)
    DIVIDE          reduce using rule 49 (expression -> FALSE .)
    MODULO          reduce using rule 49 (expression -> FALSE .)
    OR              reduce using rule 49 (expression -> FALSE .)
    AND             reduce using rule 49 (expression -> FALSE .)
    ID              reduce using rule 49 (expression -> FALSE .)
    IF              reduce using rule 49 (expression -> FALSE .)
    FOR             reduce using rule 49 (expression -> FALSE .)
    WHILE           reduce using rule 49 (expression -> FALSE .)
    PRINT           reduce using rule 49 (expression -> FALSE .)
    DEF             reduce using rule 49 (expression -> FALSE .)
    RETURN          reduce using rule 49 (expression -> FALSE .)
    $end            reduce using rule 49 (expression -> FALSE .)
    ELIF            reduce using rule 49 (expression -> FALSE .)
    ELSE            reduce using rule 49 (expression -> FALSE .)
    RPAREN          reduce using rule 49 (expression -> FALSE .)
    COMMA           reduce using rule 49 (expression -> FALSE .)
    COLON           reduce using rule 49 (expression -> FALSE .)


state 30

    (50) expression -> NUMBER .

    EQUALS          reduce using rule 50 (expression -> NUMBER .)
    LT              reduce using rule 50 (expression -> NUMBER .)
    GT              reduce using rule 50 (expression -> NUMBER .)
    LE              reduce using rule 50 (expression -> NUMBER .)
    GE              reduce using rule 50 (expression -> NUMBER .)
    PLUS            reduce using rule 50 (expression -> NUMBER .)
    MINUS           reduce using rule 50 (expression -> NUMBER .)
    MULTIPLY        reduce using rule 50 (expression -> NUMBER .)
    DIVIDE          reduce using rule 50 (expression -> NUMBER .)
    MODULO          reduce using rule 50 (expression -> NUMBER .)
    OR              reduce using rule 50 (expression -> NUMBER .)
    AND             reduce using rule 50 (expression -> NUMBER .)
    ID              reduce using rule 50 (expression -> NUMBER .)
    IF              reduce using rule 50 (expression -> NUMBER .)
    FOR             reduce using rule 50 (expression -> NUMBER .)
    WHILE           reduce using rule 50 (expression -> NUMBER .)
    PRINT           reduce using rule 50 (expression -> NUMBER .)
    DEF             reduce using rule 50 (expression -> NUMBER .)
    RETURN          reduce using rule 50 (expression -> NUMBER .)
    $end            reduce using rule 50 (expression -> NUMBER .)
    ELIF            reduce using rule 50 (expression -> NUMBER .)
    ELSE            reduce using rule 50 (expression -> NUMBER .)
    RPAREN          reduce using rule 50 (expression -> NUMBER .)
    COMMA           reduce using rule 50 (expression -> NUMBER .)
    COLON           reduce using rule 50 (expression -> NUMBER .)


state 31

    (51) expression -> FLOAT .

    EQUALS          reduce using rule 51 (expression -> FLOAT .)
    LT              reduce using rule 51 (expression -> FLOAT .)
    GT              reduce using rule 51 (expression -> FLOAT .)
    LE              reduce using rule 51 (expression -> FLOAT .)
    GE              reduce using rule 51 (expression -> FLOAT .)
    PLUS            reduce using rule 51 (expression -> FLOAT .)
    MINUS           reduce using rule 51 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 51 (expression -> FLOAT .)
    DIVIDE          reduce using rule 51 (expression -> FLOAT .)
    MODULO          reduce using rule 51 (expression -> FLOAT .)
    OR              reduce using rule 51 (expression -> FLOAT .)
    AND             reduce using rule 51 (expression -> FLOAT .)
    ID              reduce using rule 51 (expression -> FLOAT .)
    IF              reduce using rule 51 (expression -> FLOAT .)
    FOR             reduce using rule 51 (expression -> FLOAT .)
    WHILE           reduce using rule 51 (expression -> FLOAT .)
    PRINT           reduce using rule 51 (expression -> FLOAT .)
    DEF             reduce using rule 51 (expression -> FLOAT .)
    RETURN          reduce using rule 51 (expression -> FLOAT .)
    $end            reduce using rule 51 (expression -> FLOAT .)
    ELIF            reduce using rule 51 (expression -> FLOAT .)
    ELSE            reduce using rule 51 (expression -> FLOAT .)
    RPAREN          reduce using rule 51 (expression -> FLOAT .)
    COMMA           reduce using rule 51 (expression -> FLOAT .)
    COLON           reduce using rule 51 (expression -> FLOAT .)


state 32

    (52) expression -> STRING .

    EQUALS          reduce using rule 52 (expression -> STRING .)
    LT              reduce using rule 52 (expression -> STRING .)
    GT              reduce using rule 52 (expression -> STRING .)
    LE              reduce using rule 52 (expression -> STRING .)
    GE              reduce using rule 52 (expression -> STRING .)
    PLUS            reduce using rule 52 (expression -> STRING .)
    MINUS           reduce using rule 52 (expression -> STRING .)
    MULTIPLY        reduce using rule 52 (expression -> STRING .)
    DIVIDE          reduce using rule 52 (expression -> STRING .)
    MODULO          reduce using rule 52 (expression -> STRING .)
    OR              reduce using rule 52 (expression -> STRING .)
    AND             reduce using rule 52 (expression -> STRING .)
    ID              reduce using rule 52 (expression -> STRING .)
    IF              reduce using rule 52 (expression -> STRING .)
    FOR             reduce using rule 52 (expression -> STRING .)
    WHILE           reduce using rule 52 (expression -> STRING .)
    PRINT           reduce using rule 52 (expression -> STRING .)
    DEF             reduce using rule 52 (expression -> STRING .)
    RETURN          reduce using rule 52 (expression -> STRING .)
    $end            reduce using rule 52 (expression -> STRING .)
    ELIF            reduce using rule 52 (expression -> STRING .)
    ELSE            reduce using rule 52 (expression -> STRING .)
    RPAREN          reduce using rule 52 (expression -> STRING .)
    COMMA           reduce using rule 52 (expression -> STRING .)
    COLON           reduce using rule 52 (expression -> STRING .)


state 33

    (19) for_statement -> FOR ID . IN range statement

    IN              shift and go to state 58


state 34

    (20) while_statement -> WHILE condition . statement
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . for_statement
    (7) statement -> . while_statement
    (8) statement -> . print_statement
    (9) statement -> . function_def
    (10) statement -> . function_call
    (11) statement -> . return_statement
    (12) assignment -> . ID ASSIGN expression
    (13) if_statement -> . IF condition COLON statement elif_list_opt ELSE statement
    (14) if_statement -> . IF condition COLON statement elif_list_opt
    (19) for_statement -> . FOR ID IN range statement
    (20) while_statement -> . WHILE condition statement
    (22) print_statement -> . PRINT LPAREN expression RPAREN
    (23) function_def -> . DEF ID LPAREN param_list RPAREN COLON statement_list
    (24) function_call -> . ID LPAREN arg_list RPAREN
    (25) return_statement -> . RETURN expression

    ID              shift and go to state 12
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 15
    PRINT           shift and go to state 16
    DEF             shift and go to state 17
    RETURN          shift and go to state 18

    statement                      shift and go to state 59
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    for_statement                  shift and go to state 6
    while_statement                shift and go to state 7
    print_statement                shift and go to state 8
    function_def                   shift and go to state 9
    function_call                  shift and go to state 10
    return_statement               shift and go to state 11

state 35

    (22) print_statement -> PRINT LPAREN . expression RPAREN
    (37) expression -> . MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression MULTIPLY expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression MODULO expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . NOT expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . ID
    (48) expression -> . TRUE
    (49) expression -> . FALSE
    (50) expression -> . NUMBER
    (51) expression -> . FLOAT
    (52) expression -> . STRING

    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    LPAREN          shift and go to state 26
    ID              shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32

    expression                     shift and go to state 60

state 36

    (23) function_def -> DEF ID . LPAREN param_list RPAREN COLON statement_list

    LPAREN          shift and go to state 61


state 37

    (25) return_statement -> RETURN expression .
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . MULTIPLY expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . MODULO expression
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression

    ID              reduce using rule 25 (return_statement -> RETURN expression .)
    IF              reduce using rule 25 (return_statement -> RETURN expression .)
    FOR             reduce using rule 25 (return_statement -> RETURN expression .)
    WHILE           reduce using rule 25 (return_statement -> RETURN expression .)
    PRINT           reduce using rule 25 (return_statement -> RETURN expression .)
    DEF             reduce using rule 25 (return_statement -> RETURN expression .)
    RETURN          reduce using rule 25 (return_statement -> RETURN expression .)
    $end            reduce using rule 25 (return_statement -> RETURN expression .)
    ELIF            reduce using rule 25 (return_statement -> RETURN expression .)
    ELSE            reduce using rule 25 (return_statement -> RETURN expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    OR              shift and go to state 53
    AND             shift and go to state 54


state 38

    (12) assignment -> ID ASSIGN expression .
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . MULTIPLY expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . MODULO expression
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression

    ID              reduce using rule 12 (assignment -> ID ASSIGN expression .)
    IF              reduce using rule 12 (assignment -> ID ASSIGN expression .)
    FOR             reduce using rule 12 (assignment -> ID ASSIGN expression .)
    WHILE           reduce using rule 12 (assignment -> ID ASSIGN expression .)
    PRINT           reduce using rule 12 (assignment -> ID ASSIGN expression .)
    DEF             reduce using rule 12 (assignment -> ID ASSIGN expression .)
    RETURN          reduce using rule 12 (assignment -> ID ASSIGN expression .)
    $end            reduce using rule 12 (assignment -> ID ASSIGN expression .)
    ELIF            reduce using rule 12 (assignment -> ID ASSIGN expression .)
    ELSE            reduce using rule 12 (assignment -> ID ASSIGN expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    OR              shift and go to state 53
    AND             shift and go to state 54


state 39

    (24) function_call -> ID LPAREN arg_list . RPAREN
    (29) arg_list -> arg_list . COMMA expression

    RPAREN          shift and go to state 62
    COMMA           shift and go to state 63


state 40

    (30) arg_list -> expression .
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . MULTIPLY expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . MODULO expression
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression

    RPAREN          reduce using rule 30 (arg_list -> expression .)
    COMMA           reduce using rule 30 (arg_list -> expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    OR              shift and go to state 53
    AND             shift and go to state 54


state 41

    (31) arg_list -> empty .

    RPAREN          reduce using rule 31 (arg_list -> empty .)
    COMMA           reduce using rule 31 (arg_list -> empty .)


state 42

    (13) if_statement -> IF condition COLON . statement elif_list_opt ELSE statement
    (14) if_statement -> IF condition COLON . statement elif_list_opt
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . for_statement
    (7) statement -> . while_statement
    (8) statement -> . print_statement
    (9) statement -> . function_def
    (10) statement -> . function_call
    (11) statement -> . return_statement
    (12) assignment -> . ID ASSIGN expression
    (13) if_statement -> . IF condition COLON statement elif_list_opt ELSE statement
    (14) if_statement -> . IF condition COLON statement elif_list_opt
    (19) for_statement -> . FOR ID IN range statement
    (20) while_statement -> . WHILE condition statement
    (22) print_statement -> . PRINT LPAREN expression RPAREN
    (23) function_def -> . DEF ID LPAREN param_list RPAREN COLON statement_list
    (24) function_call -> . ID LPAREN arg_list RPAREN
    (25) return_statement -> . RETURN expression

    ID              shift and go to state 12
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 15
    PRINT           shift and go to state 16
    DEF             shift and go to state 17
    RETURN          shift and go to state 18

    statement                      shift and go to state 64
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    for_statement                  shift and go to state 6
    while_statement                shift and go to state 7
    print_statement                shift and go to state 8
    function_def                   shift and go to state 9
    function_call                  shift and go to state 10
    return_statement               shift and go to state 11

state 43

    (32) condition -> expression EQUALS . expression
    (37) expression -> . MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression MULTIPLY expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression MODULO expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . NOT expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . ID
    (48) expression -> . TRUE
    (49) expression -> . FALSE
    (50) expression -> . NUMBER
    (51) expression -> . FLOAT
    (52) expression -> . STRING

    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    LPAREN          shift and go to state 26
    ID              shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32

    expression                     shift and go to state 65

state 44

    (33) condition -> expression LT . expression
    (37) expression -> . MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression MULTIPLY expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression MODULO expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . NOT expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . ID
    (48) expression -> . TRUE
    (49) expression -> . FALSE
    (50) expression -> . NUMBER
    (51) expression -> . FLOAT
    (52) expression -> . STRING

    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    LPAREN          shift and go to state 26
    ID              shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32

    expression                     shift and go to state 66

state 45

    (34) condition -> expression GT . expression
    (37) expression -> . MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression MULTIPLY expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression MODULO expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . NOT expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . ID
    (48) expression -> . TRUE
    (49) expression -> . FALSE
    (50) expression -> . NUMBER
    (51) expression -> . FLOAT
    (52) expression -> . STRING

    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    LPAREN          shift and go to state 26
    ID              shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32

    expression                     shift and go to state 67

state 46

    (35) condition -> expression LE . expression
    (37) expression -> . MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression MULTIPLY expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression MODULO expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . NOT expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . ID
    (48) expression -> . TRUE
    (49) expression -> . FALSE
    (50) expression -> . NUMBER
    (51) expression -> . FLOAT
    (52) expression -> . STRING

    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    LPAREN          shift and go to state 26
    ID              shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32

    expression                     shift and go to state 68

state 47

    (36) condition -> expression GE .

    COLON           reduce using rule 36 (condition -> expression GE .)
    ID              reduce using rule 36 (condition -> expression GE .)
    IF              reduce using rule 36 (condition -> expression GE .)
    FOR             reduce using rule 36 (condition -> expression GE .)
    WHILE           reduce using rule 36 (condition -> expression GE .)
    PRINT           reduce using rule 36 (condition -> expression GE .)
    DEF             reduce using rule 36 (condition -> expression GE .)
    RETURN          reduce using rule 36 (condition -> expression GE .)


state 48

    (38) expression -> expression PLUS . expression
    (37) expression -> . MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression MULTIPLY expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression MODULO expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . NOT expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . ID
    (48) expression -> . TRUE
    (49) expression -> . FALSE
    (50) expression -> . NUMBER
    (51) expression -> . FLOAT
    (52) expression -> . STRING

    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    LPAREN          shift and go to state 26
    ID              shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32

    expression                     shift and go to state 69

state 49

    (39) expression -> expression MINUS . expression
    (37) expression -> . MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression MULTIPLY expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression MODULO expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . NOT expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . ID
    (48) expression -> . TRUE
    (49) expression -> . FALSE
    (50) expression -> . NUMBER
    (51) expression -> . FLOAT
    (52) expression -> . STRING

    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    LPAREN          shift and go to state 26
    ID              shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32

    expression                     shift and go to state 70

state 50

    (40) expression -> expression MULTIPLY . expression
    (37) expression -> . MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression MULTIPLY expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression MODULO expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . NOT expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . ID
    (48) expression -> . TRUE
    (49) expression -> . FALSE
    (50) expression -> . NUMBER
    (51) expression -> . FLOAT
    (52) expression -> . STRING

    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    LPAREN          shift and go to state 26
    ID              shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32

    expression                     shift and go to state 71

state 51

    (41) expression -> expression DIVIDE . expression
    (37) expression -> . MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression MULTIPLY expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression MODULO expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . NOT expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . ID
    (48) expression -> . TRUE
    (49) expression -> . FALSE
    (50) expression -> . NUMBER
    (51) expression -> . FLOAT
    (52) expression -> . STRING

    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    LPAREN          shift and go to state 26
    ID              shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32

    expression                     shift and go to state 72

state 52

    (42) expression -> expression MODULO . expression
    (37) expression -> . MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression MULTIPLY expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression MODULO expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . NOT expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . ID
    (48) expression -> . TRUE
    (49) expression -> . FALSE
    (50) expression -> . NUMBER
    (51) expression -> . FLOAT
    (52) expression -> . STRING

    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    LPAREN          shift and go to state 26
    ID              shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32

    expression                     shift and go to state 73

state 53

    (43) expression -> expression OR . expression
    (37) expression -> . MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression MULTIPLY expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression MODULO expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . NOT expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . ID
    (48) expression -> . TRUE
    (49) expression -> . FALSE
    (50) expression -> . NUMBER
    (51) expression -> . FLOAT
    (52) expression -> . STRING

    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    LPAREN          shift and go to state 26
    ID              shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32

    expression                     shift and go to state 74

state 54

    (44) expression -> expression AND . expression
    (37) expression -> . MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression MULTIPLY expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression MODULO expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . NOT expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . ID
    (48) expression -> . TRUE
    (49) expression -> . FALSE
    (50) expression -> . NUMBER
    (51) expression -> . FLOAT
    (52) expression -> . STRING

    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    LPAREN          shift and go to state 26
    ID              shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32

    expression                     shift and go to state 75

state 55

    (37) expression -> MINUS expression .
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . MULTIPLY expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . MODULO expression
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression

    EQUALS          reduce using rule 37 (expression -> MINUS expression .)
    LT              reduce using rule 37 (expression -> MINUS expression .)
    GT              reduce using rule 37 (expression -> MINUS expression .)
    LE              reduce using rule 37 (expression -> MINUS expression .)
    GE              reduce using rule 37 (expression -> MINUS expression .)
    PLUS            reduce using rule 37 (expression -> MINUS expression .)
    MINUS           reduce using rule 37 (expression -> MINUS expression .)
    MULTIPLY        reduce using rule 37 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 37 (expression -> MINUS expression .)
    MODULO          reduce using rule 37 (expression -> MINUS expression .)
    OR              reduce using rule 37 (expression -> MINUS expression .)
    AND             reduce using rule 37 (expression -> MINUS expression .)
    ID              reduce using rule 37 (expression -> MINUS expression .)
    IF              reduce using rule 37 (expression -> MINUS expression .)
    FOR             reduce using rule 37 (expression -> MINUS expression .)
    WHILE           reduce using rule 37 (expression -> MINUS expression .)
    PRINT           reduce using rule 37 (expression -> MINUS expression .)
    DEF             reduce using rule 37 (expression -> MINUS expression .)
    RETURN          reduce using rule 37 (expression -> MINUS expression .)
    $end            reduce using rule 37 (expression -> MINUS expression .)
    ELIF            reduce using rule 37 (expression -> MINUS expression .)
    ELSE            reduce using rule 37 (expression -> MINUS expression .)
    RPAREN          reduce using rule 37 (expression -> MINUS expression .)
    COMMA           reduce using rule 37 (expression -> MINUS expression .)
    COLON           reduce using rule 37 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! MULTIPLY        [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! MODULO          [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]
  ! AND             [ shift and go to state 54 ]


state 56

    (45) expression -> NOT expression .
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . MULTIPLY expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . MODULO expression
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression

    EQUALS          reduce using rule 45 (expression -> NOT expression .)
    LT              reduce using rule 45 (expression -> NOT expression .)
    GT              reduce using rule 45 (expression -> NOT expression .)
    LE              reduce using rule 45 (expression -> NOT expression .)
    GE              reduce using rule 45 (expression -> NOT expression .)
    OR              reduce using rule 45 (expression -> NOT expression .)
    AND             reduce using rule 45 (expression -> NOT expression .)
    ID              reduce using rule 45 (expression -> NOT expression .)
    IF              reduce using rule 45 (expression -> NOT expression .)
    FOR             reduce using rule 45 (expression -> NOT expression .)
    WHILE           reduce using rule 45 (expression -> NOT expression .)
    PRINT           reduce using rule 45 (expression -> NOT expression .)
    DEF             reduce using rule 45 (expression -> NOT expression .)
    RETURN          reduce using rule 45 (expression -> NOT expression .)
    $end            reduce using rule 45 (expression -> NOT expression .)
    ELIF            reduce using rule 45 (expression -> NOT expression .)
    ELSE            reduce using rule 45 (expression -> NOT expression .)
    RPAREN          reduce using rule 45 (expression -> NOT expression .)
    COMMA           reduce using rule 45 (expression -> NOT expression .)
    COLON           reduce using rule 45 (expression -> NOT expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52

  ! PLUS            [ reduce using rule 45 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 45 (expression -> NOT expression .) ]
  ! MULTIPLY        [ reduce using rule 45 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 45 (expression -> NOT expression .) ]
  ! MODULO          [ reduce using rule 45 (expression -> NOT expression .) ]
  ! OR              [ shift and go to state 53 ]
  ! AND             [ shift and go to state 54 ]


state 57

    (46) expression -> LPAREN expression . RPAREN
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . MULTIPLY expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . MODULO expression
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression

    RPAREN          shift and go to state 76
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    OR              shift and go to state 53
    AND             shift and go to state 54


state 58

    (19) for_statement -> FOR ID IN . range statement
    (21) range -> . RANGE LPAREN expression COMMA expression RPAREN

    RANGE           shift and go to state 78

    range                          shift and go to state 77

state 59

    (20) while_statement -> WHILE condition statement .

    ID              reduce using rule 20 (while_statement -> WHILE condition statement .)
    IF              reduce using rule 20 (while_statement -> WHILE condition statement .)
    FOR             reduce using rule 20 (while_statement -> WHILE condition statement .)
    WHILE           reduce using rule 20 (while_statement -> WHILE condition statement .)
    PRINT           reduce using rule 20 (while_statement -> WHILE condition statement .)
    DEF             reduce using rule 20 (while_statement -> WHILE condition statement .)
    RETURN          reduce using rule 20 (while_statement -> WHILE condition statement .)
    $end            reduce using rule 20 (while_statement -> WHILE condition statement .)
    ELIF            reduce using rule 20 (while_statement -> WHILE condition statement .)
    ELSE            reduce using rule 20 (while_statement -> WHILE condition statement .)


state 60

    (22) print_statement -> PRINT LPAREN expression . RPAREN
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . MULTIPLY expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . MODULO expression
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression

    RPAREN          shift and go to state 79
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    OR              shift and go to state 53
    AND             shift and go to state 54


state 61

    (23) function_def -> DEF ID LPAREN . param_list RPAREN COLON statement_list
    (26) param_list -> . param_list COMMA ID
    (27) param_list -> . ID
    (28) param_list -> . empty
    (53) empty -> .

    ID              shift and go to state 80
    RPAREN          reduce using rule 53 (empty -> .)
    COMMA           reduce using rule 53 (empty -> .)

    param_list                     shift and go to state 81
    empty                          shift and go to state 82

state 62

    (24) function_call -> ID LPAREN arg_list RPAREN .

    ID              reduce using rule 24 (function_call -> ID LPAREN arg_list RPAREN .)
    IF              reduce using rule 24 (function_call -> ID LPAREN arg_list RPAREN .)
    FOR             reduce using rule 24 (function_call -> ID LPAREN arg_list RPAREN .)
    WHILE           reduce using rule 24 (function_call -> ID LPAREN arg_list RPAREN .)
    PRINT           reduce using rule 24 (function_call -> ID LPAREN arg_list RPAREN .)
    DEF             reduce using rule 24 (function_call -> ID LPAREN arg_list RPAREN .)
    RETURN          reduce using rule 24 (function_call -> ID LPAREN arg_list RPAREN .)
    $end            reduce using rule 24 (function_call -> ID LPAREN arg_list RPAREN .)
    ELIF            reduce using rule 24 (function_call -> ID LPAREN arg_list RPAREN .)
    ELSE            reduce using rule 24 (function_call -> ID LPAREN arg_list RPAREN .)


state 63

    (29) arg_list -> arg_list COMMA . expression
    (37) expression -> . MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression MULTIPLY expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression MODULO expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . NOT expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . ID
    (48) expression -> . TRUE
    (49) expression -> . FALSE
    (50) expression -> . NUMBER
    (51) expression -> . FLOAT
    (52) expression -> . STRING

    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    LPAREN          shift and go to state 26
    ID              shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32

    expression                     shift and go to state 83

state 64

    (13) if_statement -> IF condition COLON statement . elif_list_opt ELSE statement
    (14) if_statement -> IF condition COLON statement . elif_list_opt
    (15) elif_list_opt -> . elif_list
    (16) elif_list_opt -> . empty
    (17) elif_list -> . elif_list ELIF condition COLON statement
    (18) elif_list -> . ELIF condition COLON statement
    (53) empty -> .

  ! shift/reduce conflict for ELIF resolved as shift
    ELIF            shift and go to state 87
    ID              reduce using rule 53 (empty -> .)
    IF              reduce using rule 53 (empty -> .)
    FOR             reduce using rule 53 (empty -> .)
    WHILE           reduce using rule 53 (empty -> .)
    PRINT           reduce using rule 53 (empty -> .)
    DEF             reduce using rule 53 (empty -> .)
    RETURN          reduce using rule 53 (empty -> .)
    $end            reduce using rule 53 (empty -> .)
    ELSE            reduce using rule 53 (empty -> .)

  ! ELIF            [ reduce using rule 53 (empty -> .) ]

    elif_list_opt                  shift and go to state 84
    elif_list                      shift and go to state 85
    empty                          shift and go to state 86

state 65

    (32) condition -> expression EQUALS expression .
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . MULTIPLY expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . MODULO expression
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression

    COLON           reduce using rule 32 (condition -> expression EQUALS expression .)
    ID              reduce using rule 32 (condition -> expression EQUALS expression .)
    IF              reduce using rule 32 (condition -> expression EQUALS expression .)
    FOR             reduce using rule 32 (condition -> expression EQUALS expression .)
    WHILE           reduce using rule 32 (condition -> expression EQUALS expression .)
    PRINT           reduce using rule 32 (condition -> expression EQUALS expression .)
    DEF             reduce using rule 32 (condition -> expression EQUALS expression .)
    RETURN          reduce using rule 32 (condition -> expression EQUALS expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    OR              shift and go to state 53
    AND             shift and go to state 54


state 66

    (33) condition -> expression LT expression .
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . MULTIPLY expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . MODULO expression
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression

    COLON           reduce using rule 33 (condition -> expression LT expression .)
    ID              reduce using rule 33 (condition -> expression LT expression .)
    IF              reduce using rule 33 (condition -> expression LT expression .)
    FOR             reduce using rule 33 (condition -> expression LT expression .)
    WHILE           reduce using rule 33 (condition -> expression LT expression .)
    PRINT           reduce using rule 33 (condition -> expression LT expression .)
    DEF             reduce using rule 33 (condition -> expression LT expression .)
    RETURN          reduce using rule 33 (condition -> expression LT expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    OR              shift and go to state 53
    AND             shift and go to state 54


state 67

    (34) condition -> expression GT expression .
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . MULTIPLY expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . MODULO expression
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression

    COLON           reduce using rule 34 (condition -> expression GT expression .)
    ID              reduce using rule 34 (condition -> expression GT expression .)
    IF              reduce using rule 34 (condition -> expression GT expression .)
    FOR             reduce using rule 34 (condition -> expression GT expression .)
    WHILE           reduce using rule 34 (condition -> expression GT expression .)
    PRINT           reduce using rule 34 (condition -> expression GT expression .)
    DEF             reduce using rule 34 (condition -> expression GT expression .)
    RETURN          reduce using rule 34 (condition -> expression GT expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    OR              shift and go to state 53
    AND             shift and go to state 54


state 68

    (35) condition -> expression LE expression .
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . MULTIPLY expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . MODULO expression
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression

    COLON           reduce using rule 35 (condition -> expression LE expression .)
    ID              reduce using rule 35 (condition -> expression LE expression .)
    IF              reduce using rule 35 (condition -> expression LE expression .)
    FOR             reduce using rule 35 (condition -> expression LE expression .)
    WHILE           reduce using rule 35 (condition -> expression LE expression .)
    PRINT           reduce using rule 35 (condition -> expression LE expression .)
    DEF             reduce using rule 35 (condition -> expression LE expression .)
    RETURN          reduce using rule 35 (condition -> expression LE expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    OR              shift and go to state 53
    AND             shift and go to state 54


state 69

    (38) expression -> expression PLUS expression .
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . MULTIPLY expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . MODULO expression
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression

    EQUALS          reduce using rule 38 (expression -> expression PLUS expression .)
    LT              reduce using rule 38 (expression -> expression PLUS expression .)
    GT              reduce using rule 38 (expression -> expression PLUS expression .)
    LE              reduce using rule 38 (expression -> expression PLUS expression .)
    GE              reduce using rule 38 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 38 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 38 (expression -> expression PLUS expression .)
    OR              reduce using rule 38 (expression -> expression PLUS expression .)
    AND             reduce using rule 38 (expression -> expression PLUS expression .)
    ID              reduce using rule 38 (expression -> expression PLUS expression .)
    IF              reduce using rule 38 (expression -> expression PLUS expression .)
    FOR             reduce using rule 38 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 38 (expression -> expression PLUS expression .)
    PRINT           reduce using rule 38 (expression -> expression PLUS expression .)
    DEF             reduce using rule 38 (expression -> expression PLUS expression .)
    RETURN          reduce using rule 38 (expression -> expression PLUS expression .)
    $end            reduce using rule 38 (expression -> expression PLUS expression .)
    ELIF            reduce using rule 38 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 38 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 38 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 38 (expression -> expression PLUS expression .)
    COLON           reduce using rule 38 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52

  ! MULTIPLY        [ reduce using rule 38 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 38 (expression -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 38 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! OR              [ shift and go to state 53 ]
  ! AND             [ shift and go to state 54 ]


state 70

    (39) expression -> expression MINUS expression .
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . MULTIPLY expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . MODULO expression
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression

    EQUALS          reduce using rule 39 (expression -> expression MINUS expression .)
    LT              reduce using rule 39 (expression -> expression MINUS expression .)
    GT              reduce using rule 39 (expression -> expression MINUS expression .)
    LE              reduce using rule 39 (expression -> expression MINUS expression .)
    GE              reduce using rule 39 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 39 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 39 (expression -> expression MINUS expression .)
    OR              reduce using rule 39 (expression -> expression MINUS expression .)
    AND             reduce using rule 39 (expression -> expression MINUS expression .)
    ID              reduce using rule 39 (expression -> expression MINUS expression .)
    IF              reduce using rule 39 (expression -> expression MINUS expression .)
    FOR             reduce using rule 39 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 39 (expression -> expression MINUS expression .)
    PRINT           reduce using rule 39 (expression -> expression MINUS expression .)
    DEF             reduce using rule 39 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 39 (expression -> expression MINUS expression .)
    $end            reduce using rule 39 (expression -> expression MINUS expression .)
    ELIF            reduce using rule 39 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 39 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 39 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 39 (expression -> expression MINUS expression .)
    COLON           reduce using rule 39 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52

  ! MULTIPLY        [ reduce using rule 39 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 39 (expression -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 39 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! OR              [ shift and go to state 53 ]
  ! AND             [ shift and go to state 54 ]


state 71

    (40) expression -> expression MULTIPLY expression .
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . MULTIPLY expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . MODULO expression
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression

    EQUALS          reduce using rule 40 (expression -> expression MULTIPLY expression .)
    LT              reduce using rule 40 (expression -> expression MULTIPLY expression .)
    GT              reduce using rule 40 (expression -> expression MULTIPLY expression .)
    LE              reduce using rule 40 (expression -> expression MULTIPLY expression .)
    GE              reduce using rule 40 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 40 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 40 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 40 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 40 (expression -> expression MULTIPLY expression .)
    MODULO          reduce using rule 40 (expression -> expression MULTIPLY expression .)
    OR              reduce using rule 40 (expression -> expression MULTIPLY expression .)
    AND             reduce using rule 40 (expression -> expression MULTIPLY expression .)
    ID              reduce using rule 40 (expression -> expression MULTIPLY expression .)
    IF              reduce using rule 40 (expression -> expression MULTIPLY expression .)
    FOR             reduce using rule 40 (expression -> expression MULTIPLY expression .)
    WHILE           reduce using rule 40 (expression -> expression MULTIPLY expression .)
    PRINT           reduce using rule 40 (expression -> expression MULTIPLY expression .)
    DEF             reduce using rule 40 (expression -> expression MULTIPLY expression .)
    RETURN          reduce using rule 40 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 40 (expression -> expression MULTIPLY expression .)
    ELIF            reduce using rule 40 (expression -> expression MULTIPLY expression .)
    ELSE            reduce using rule 40 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 40 (expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 40 (expression -> expression MULTIPLY expression .)
    COLON           reduce using rule 40 (expression -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! MULTIPLY        [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! MODULO          [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]
  ! AND             [ shift and go to state 54 ]


state 72

    (41) expression -> expression DIVIDE expression .
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . MULTIPLY expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . MODULO expression
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression

    EQUALS          reduce using rule 41 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 41 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 41 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 41 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 41 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 41 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 41 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 41 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 41 (expression -> expression DIVIDE expression .)
    MODULO          reduce using rule 41 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 41 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 41 (expression -> expression DIVIDE expression .)
    ID              reduce using rule 41 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 41 (expression -> expression DIVIDE expression .)
    FOR             reduce using rule 41 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 41 (expression -> expression DIVIDE expression .)
    PRINT           reduce using rule 41 (expression -> expression DIVIDE expression .)
    DEF             reduce using rule 41 (expression -> expression DIVIDE expression .)
    RETURN          reduce using rule 41 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 41 (expression -> expression DIVIDE expression .)
    ELIF            reduce using rule 41 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 41 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 41 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 41 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 41 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! MULTIPLY        [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! MODULO          [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]
  ! AND             [ shift and go to state 54 ]


state 73

    (42) expression -> expression MODULO expression .
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . MULTIPLY expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . MODULO expression
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression

    EQUALS          reduce using rule 42 (expression -> expression MODULO expression .)
    LT              reduce using rule 42 (expression -> expression MODULO expression .)
    GT              reduce using rule 42 (expression -> expression MODULO expression .)
    LE              reduce using rule 42 (expression -> expression MODULO expression .)
    GE              reduce using rule 42 (expression -> expression MODULO expression .)
    PLUS            reduce using rule 42 (expression -> expression MODULO expression .)
    MINUS           reduce using rule 42 (expression -> expression MODULO expression .)
    MULTIPLY        reduce using rule 42 (expression -> expression MODULO expression .)
    DIVIDE          reduce using rule 42 (expression -> expression MODULO expression .)
    MODULO          reduce using rule 42 (expression -> expression MODULO expression .)
    OR              reduce using rule 42 (expression -> expression MODULO expression .)
    AND             reduce using rule 42 (expression -> expression MODULO expression .)
    ID              reduce using rule 42 (expression -> expression MODULO expression .)
    IF              reduce using rule 42 (expression -> expression MODULO expression .)
    FOR             reduce using rule 42 (expression -> expression MODULO expression .)
    WHILE           reduce using rule 42 (expression -> expression MODULO expression .)
    PRINT           reduce using rule 42 (expression -> expression MODULO expression .)
    DEF             reduce using rule 42 (expression -> expression MODULO expression .)
    RETURN          reduce using rule 42 (expression -> expression MODULO expression .)
    $end            reduce using rule 42 (expression -> expression MODULO expression .)
    ELIF            reduce using rule 42 (expression -> expression MODULO expression .)
    ELSE            reduce using rule 42 (expression -> expression MODULO expression .)
    RPAREN          reduce using rule 42 (expression -> expression MODULO expression .)
    COMMA           reduce using rule 42 (expression -> expression MODULO expression .)
    COLON           reduce using rule 42 (expression -> expression MODULO expression .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! MULTIPLY        [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! MODULO          [ shift and go to state 52 ]
  ! OR              [ shift and go to state 53 ]
  ! AND             [ shift and go to state 54 ]


state 74

    (43) expression -> expression OR expression .
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . MULTIPLY expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . MODULO expression
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression

    EQUALS          reduce using rule 43 (expression -> expression OR expression .)
    LT              reduce using rule 43 (expression -> expression OR expression .)
    GT              reduce using rule 43 (expression -> expression OR expression .)
    LE              reduce using rule 43 (expression -> expression OR expression .)
    GE              reduce using rule 43 (expression -> expression OR expression .)
    OR              reduce using rule 43 (expression -> expression OR expression .)
    ID              reduce using rule 43 (expression -> expression OR expression .)
    IF              reduce using rule 43 (expression -> expression OR expression .)
    FOR             reduce using rule 43 (expression -> expression OR expression .)
    WHILE           reduce using rule 43 (expression -> expression OR expression .)
    PRINT           reduce using rule 43 (expression -> expression OR expression .)
    DEF             reduce using rule 43 (expression -> expression OR expression .)
    RETURN          reduce using rule 43 (expression -> expression OR expression .)
    $end            reduce using rule 43 (expression -> expression OR expression .)
    ELIF            reduce using rule 43 (expression -> expression OR expression .)
    ELSE            reduce using rule 43 (expression -> expression OR expression .)
    RPAREN          reduce using rule 43 (expression -> expression OR expression .)
    COMMA           reduce using rule 43 (expression -> expression OR expression .)
    COLON           reduce using rule 43 (expression -> expression OR expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    AND             shift and go to state 54

  ! PLUS            [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! MULTIPLY        [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! MODULO          [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 53 ]


state 75

    (44) expression -> expression AND expression .
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . MULTIPLY expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . MODULO expression
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression

    EQUALS          reduce using rule 44 (expression -> expression AND expression .)
    LT              reduce using rule 44 (expression -> expression AND expression .)
    GT              reduce using rule 44 (expression -> expression AND expression .)
    LE              reduce using rule 44 (expression -> expression AND expression .)
    GE              reduce using rule 44 (expression -> expression AND expression .)
    OR              reduce using rule 44 (expression -> expression AND expression .)
    AND             reduce using rule 44 (expression -> expression AND expression .)
    ID              reduce using rule 44 (expression -> expression AND expression .)
    IF              reduce using rule 44 (expression -> expression AND expression .)
    FOR             reduce using rule 44 (expression -> expression AND expression .)
    WHILE           reduce using rule 44 (expression -> expression AND expression .)
    PRINT           reduce using rule 44 (expression -> expression AND expression .)
    DEF             reduce using rule 44 (expression -> expression AND expression .)
    RETURN          reduce using rule 44 (expression -> expression AND expression .)
    $end            reduce using rule 44 (expression -> expression AND expression .)
    ELIF            reduce using rule 44 (expression -> expression AND expression .)
    ELSE            reduce using rule 44 (expression -> expression AND expression .)
    RPAREN          reduce using rule 44 (expression -> expression AND expression .)
    COMMA           reduce using rule 44 (expression -> expression AND expression .)
    COLON           reduce using rule 44 (expression -> expression AND expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52

  ! PLUS            [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! MULTIPLY        [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! MODULO          [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! OR              [ shift and go to state 53 ]
  ! AND             [ shift and go to state 54 ]


state 76

    (46) expression -> LPAREN expression RPAREN .

    EQUALS          reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    DEF             reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    ELIF            reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 46 (expression -> LPAREN expression RPAREN .)


state 77

    (19) for_statement -> FOR ID IN range . statement
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . for_statement
    (7) statement -> . while_statement
    (8) statement -> . print_statement
    (9) statement -> . function_def
    (10) statement -> . function_call
    (11) statement -> . return_statement
    (12) assignment -> . ID ASSIGN expression
    (13) if_statement -> . IF condition COLON statement elif_list_opt ELSE statement
    (14) if_statement -> . IF condition COLON statement elif_list_opt
    (19) for_statement -> . FOR ID IN range statement
    (20) while_statement -> . WHILE condition statement
    (22) print_statement -> . PRINT LPAREN expression RPAREN
    (23) function_def -> . DEF ID LPAREN param_list RPAREN COLON statement_list
    (24) function_call -> . ID LPAREN arg_list RPAREN
    (25) return_statement -> . RETURN expression

    ID              shift and go to state 12
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 15
    PRINT           shift and go to state 16
    DEF             shift and go to state 17
    RETURN          shift and go to state 18

    statement                      shift and go to state 88
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    for_statement                  shift and go to state 6
    while_statement                shift and go to state 7
    print_statement                shift and go to state 8
    function_def                   shift and go to state 9
    function_call                  shift and go to state 10
    return_statement               shift and go to state 11

state 78

    (21) range -> RANGE . LPAREN expression COMMA expression RPAREN

    LPAREN          shift and go to state 89


state 79

    (22) print_statement -> PRINT LPAREN expression RPAREN .

    ID              reduce using rule 22 (print_statement -> PRINT LPAREN expression RPAREN .)
    IF              reduce using rule 22 (print_statement -> PRINT LPAREN expression RPAREN .)
    FOR             reduce using rule 22 (print_statement -> PRINT LPAREN expression RPAREN .)
    WHILE           reduce using rule 22 (print_statement -> PRINT LPAREN expression RPAREN .)
    PRINT           reduce using rule 22 (print_statement -> PRINT LPAREN expression RPAREN .)
    DEF             reduce using rule 22 (print_statement -> PRINT LPAREN expression RPAREN .)
    RETURN          reduce using rule 22 (print_statement -> PRINT LPAREN expression RPAREN .)
    $end            reduce using rule 22 (print_statement -> PRINT LPAREN expression RPAREN .)
    ELIF            reduce using rule 22 (print_statement -> PRINT LPAREN expression RPAREN .)
    ELSE            reduce using rule 22 (print_statement -> PRINT LPAREN expression RPAREN .)


state 80

    (27) param_list -> ID .

    RPAREN          reduce using rule 27 (param_list -> ID .)
    COMMA           reduce using rule 27 (param_list -> ID .)


state 81

    (23) function_def -> DEF ID LPAREN param_list . RPAREN COLON statement_list
    (26) param_list -> param_list . COMMA ID

    RPAREN          shift and go to state 90
    COMMA           shift and go to state 91


state 82

    (28) param_list -> empty .

    RPAREN          reduce using rule 28 (param_list -> empty .)
    COMMA           reduce using rule 28 (param_list -> empty .)


state 83

    (29) arg_list -> arg_list COMMA expression .
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . MULTIPLY expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . MODULO expression
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression

    RPAREN          reduce using rule 29 (arg_list -> arg_list COMMA expression .)
    COMMA           reduce using rule 29 (arg_list -> arg_list COMMA expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    OR              shift and go to state 53
    AND             shift and go to state 54


state 84

    (13) if_statement -> IF condition COLON statement elif_list_opt . ELSE statement
    (14) if_statement -> IF condition COLON statement elif_list_opt .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 92
    ID              reduce using rule 14 (if_statement -> IF condition COLON statement elif_list_opt .)
    IF              reduce using rule 14 (if_statement -> IF condition COLON statement elif_list_opt .)
    FOR             reduce using rule 14 (if_statement -> IF condition COLON statement elif_list_opt .)
    WHILE           reduce using rule 14 (if_statement -> IF condition COLON statement elif_list_opt .)
    PRINT           reduce using rule 14 (if_statement -> IF condition COLON statement elif_list_opt .)
    DEF             reduce using rule 14 (if_statement -> IF condition COLON statement elif_list_opt .)
    RETURN          reduce using rule 14 (if_statement -> IF condition COLON statement elif_list_opt .)
    $end            reduce using rule 14 (if_statement -> IF condition COLON statement elif_list_opt .)
    ELIF            reduce using rule 14 (if_statement -> IF condition COLON statement elif_list_opt .)

  ! ELSE            [ reduce using rule 14 (if_statement -> IF condition COLON statement elif_list_opt .) ]


state 85

    (15) elif_list_opt -> elif_list .
    (17) elif_list -> elif_list . ELIF condition COLON statement

  ! shift/reduce conflict for ELIF resolved as shift
    ID              reduce using rule 15 (elif_list_opt -> elif_list .)
    IF              reduce using rule 15 (elif_list_opt -> elif_list .)
    FOR             reduce using rule 15 (elif_list_opt -> elif_list .)
    WHILE           reduce using rule 15 (elif_list_opt -> elif_list .)
    PRINT           reduce using rule 15 (elif_list_opt -> elif_list .)
    DEF             reduce using rule 15 (elif_list_opt -> elif_list .)
    RETURN          reduce using rule 15 (elif_list_opt -> elif_list .)
    $end            reduce using rule 15 (elif_list_opt -> elif_list .)
    ELSE            reduce using rule 15 (elif_list_opt -> elif_list .)
    ELIF            shift and go to state 93

  ! ELIF            [ reduce using rule 15 (elif_list_opt -> elif_list .) ]


state 86

    (16) elif_list_opt -> empty .

    ID              reduce using rule 16 (elif_list_opt -> empty .)
    IF              reduce using rule 16 (elif_list_opt -> empty .)
    FOR             reduce using rule 16 (elif_list_opt -> empty .)
    WHILE           reduce using rule 16 (elif_list_opt -> empty .)
    PRINT           reduce using rule 16 (elif_list_opt -> empty .)
    DEF             reduce using rule 16 (elif_list_opt -> empty .)
    RETURN          reduce using rule 16 (elif_list_opt -> empty .)
    $end            reduce using rule 16 (elif_list_opt -> empty .)
    ELIF            reduce using rule 16 (elif_list_opt -> empty .)
    ELSE            reduce using rule 16 (elif_list_opt -> empty .)


state 87

    (18) elif_list -> ELIF . condition COLON statement
    (32) condition -> . expression EQUALS expression
    (33) condition -> . expression LT expression
    (34) condition -> . expression GT expression
    (35) condition -> . expression LE expression
    (36) condition -> . expression GE
    (37) expression -> . MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression MULTIPLY expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression MODULO expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . NOT expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . ID
    (48) expression -> . TRUE
    (49) expression -> . FALSE
    (50) expression -> . NUMBER
    (51) expression -> . FLOAT
    (52) expression -> . STRING

    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    LPAREN          shift and go to state 26
    ID              shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32

    condition                      shift and go to state 94
    expression                     shift and go to state 23

state 88

    (19) for_statement -> FOR ID IN range statement .

    ID              reduce using rule 19 (for_statement -> FOR ID IN range statement .)
    IF              reduce using rule 19 (for_statement -> FOR ID IN range statement .)
    FOR             reduce using rule 19 (for_statement -> FOR ID IN range statement .)
    WHILE           reduce using rule 19 (for_statement -> FOR ID IN range statement .)
    PRINT           reduce using rule 19 (for_statement -> FOR ID IN range statement .)
    DEF             reduce using rule 19 (for_statement -> FOR ID IN range statement .)
    RETURN          reduce using rule 19 (for_statement -> FOR ID IN range statement .)
    $end            reduce using rule 19 (for_statement -> FOR ID IN range statement .)
    ELIF            reduce using rule 19 (for_statement -> FOR ID IN range statement .)
    ELSE            reduce using rule 19 (for_statement -> FOR ID IN range statement .)


state 89

    (21) range -> RANGE LPAREN . expression COMMA expression RPAREN
    (37) expression -> . MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression MULTIPLY expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression MODULO expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . NOT expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . ID
    (48) expression -> . TRUE
    (49) expression -> . FALSE
    (50) expression -> . NUMBER
    (51) expression -> . FLOAT
    (52) expression -> . STRING

    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    LPAREN          shift and go to state 26
    ID              shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32

    expression                     shift and go to state 95

state 90

    (23) function_def -> DEF ID LPAREN param_list RPAREN . COLON statement_list

    COLON           shift and go to state 96


state 91

    (26) param_list -> param_list COMMA . ID

    ID              shift and go to state 97


state 92

    (13) if_statement -> IF condition COLON statement elif_list_opt ELSE . statement
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . for_statement
    (7) statement -> . while_statement
    (8) statement -> . print_statement
    (9) statement -> . function_def
    (10) statement -> . function_call
    (11) statement -> . return_statement
    (12) assignment -> . ID ASSIGN expression
    (13) if_statement -> . IF condition COLON statement elif_list_opt ELSE statement
    (14) if_statement -> . IF condition COLON statement elif_list_opt
    (19) for_statement -> . FOR ID IN range statement
    (20) while_statement -> . WHILE condition statement
    (22) print_statement -> . PRINT LPAREN expression RPAREN
    (23) function_def -> . DEF ID LPAREN param_list RPAREN COLON statement_list
    (24) function_call -> . ID LPAREN arg_list RPAREN
    (25) return_statement -> . RETURN expression

    ID              shift and go to state 12
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 15
    PRINT           shift and go to state 16
    DEF             shift and go to state 17
    RETURN          shift and go to state 18

    statement                      shift and go to state 98
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    for_statement                  shift and go to state 6
    while_statement                shift and go to state 7
    print_statement                shift and go to state 8
    function_def                   shift and go to state 9
    function_call                  shift and go to state 10
    return_statement               shift and go to state 11

state 93

    (17) elif_list -> elif_list ELIF . condition COLON statement
    (32) condition -> . expression EQUALS expression
    (33) condition -> . expression LT expression
    (34) condition -> . expression GT expression
    (35) condition -> . expression LE expression
    (36) condition -> . expression GE
    (37) expression -> . MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression MULTIPLY expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression MODULO expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . NOT expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . ID
    (48) expression -> . TRUE
    (49) expression -> . FALSE
    (50) expression -> . NUMBER
    (51) expression -> . FLOAT
    (52) expression -> . STRING

    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    LPAREN          shift and go to state 26
    ID              shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32

    condition                      shift and go to state 99
    expression                     shift and go to state 23

state 94

    (18) elif_list -> ELIF condition . COLON statement

    COLON           shift and go to state 100


state 95

    (21) range -> RANGE LPAREN expression . COMMA expression RPAREN
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . MULTIPLY expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . MODULO expression
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression

    COMMA           shift and go to state 101
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    OR              shift and go to state 53
    AND             shift and go to state 54


state 96

    (23) function_def -> DEF ID LPAREN param_list RPAREN COLON . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . for_statement
    (7) statement -> . while_statement
    (8) statement -> . print_statement
    (9) statement -> . function_def
    (10) statement -> . function_call
    (11) statement -> . return_statement
    (12) assignment -> . ID ASSIGN expression
    (13) if_statement -> . IF condition COLON statement elif_list_opt ELSE statement
    (14) if_statement -> . IF condition COLON statement elif_list_opt
    (19) for_statement -> . FOR ID IN range statement
    (20) while_statement -> . WHILE condition statement
    (22) print_statement -> . PRINT LPAREN expression RPAREN
    (23) function_def -> . DEF ID LPAREN param_list RPAREN COLON statement_list
    (24) function_call -> . ID LPAREN arg_list RPAREN
    (25) return_statement -> . RETURN expression

    ID              shift and go to state 12
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 15
    PRINT           shift and go to state 16
    DEF             shift and go to state 17
    RETURN          shift and go to state 18

    statement_list                 shift and go to state 102
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    for_statement                  shift and go to state 6
    while_statement                shift and go to state 7
    print_statement                shift and go to state 8
    function_def                   shift and go to state 9
    function_call                  shift and go to state 10
    return_statement               shift and go to state 11

state 97

    (26) param_list -> param_list COMMA ID .

    RPAREN          reduce using rule 26 (param_list -> param_list COMMA ID .)
    COMMA           reduce using rule 26 (param_list -> param_list COMMA ID .)


state 98

    (13) if_statement -> IF condition COLON statement elif_list_opt ELSE statement .

    ID              reduce using rule 13 (if_statement -> IF condition COLON statement elif_list_opt ELSE statement .)
    IF              reduce using rule 13 (if_statement -> IF condition COLON statement elif_list_opt ELSE statement .)
    FOR             reduce using rule 13 (if_statement -> IF condition COLON statement elif_list_opt ELSE statement .)
    WHILE           reduce using rule 13 (if_statement -> IF condition COLON statement elif_list_opt ELSE statement .)
    PRINT           reduce using rule 13 (if_statement -> IF condition COLON statement elif_list_opt ELSE statement .)
    DEF             reduce using rule 13 (if_statement -> IF condition COLON statement elif_list_opt ELSE statement .)
    RETURN          reduce using rule 13 (if_statement -> IF condition COLON statement elif_list_opt ELSE statement .)
    $end            reduce using rule 13 (if_statement -> IF condition COLON statement elif_list_opt ELSE statement .)
    ELIF            reduce using rule 13 (if_statement -> IF condition COLON statement elif_list_opt ELSE statement .)
    ELSE            reduce using rule 13 (if_statement -> IF condition COLON statement elif_list_opt ELSE statement .)


state 99

    (17) elif_list -> elif_list ELIF condition . COLON statement

    COLON           shift and go to state 103


state 100

    (18) elif_list -> ELIF condition COLON . statement
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . for_statement
    (7) statement -> . while_statement
    (8) statement -> . print_statement
    (9) statement -> . function_def
    (10) statement -> . function_call
    (11) statement -> . return_statement
    (12) assignment -> . ID ASSIGN expression
    (13) if_statement -> . IF condition COLON statement elif_list_opt ELSE statement
    (14) if_statement -> . IF condition COLON statement elif_list_opt
    (19) for_statement -> . FOR ID IN range statement
    (20) while_statement -> . WHILE condition statement
    (22) print_statement -> . PRINT LPAREN expression RPAREN
    (23) function_def -> . DEF ID LPAREN param_list RPAREN COLON statement_list
    (24) function_call -> . ID LPAREN arg_list RPAREN
    (25) return_statement -> . RETURN expression

    ID              shift and go to state 12
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 15
    PRINT           shift and go to state 16
    DEF             shift and go to state 17
    RETURN          shift and go to state 18

    statement                      shift and go to state 104
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    for_statement                  shift and go to state 6
    while_statement                shift and go to state 7
    print_statement                shift and go to state 8
    function_def                   shift and go to state 9
    function_call                  shift and go to state 10
    return_statement               shift and go to state 11

state 101

    (21) range -> RANGE LPAREN expression COMMA . expression RPAREN
    (37) expression -> . MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression MULTIPLY expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression MODULO expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . NOT expression
    (46) expression -> . LPAREN expression RPAREN
    (47) expression -> . ID
    (48) expression -> . TRUE
    (49) expression -> . FALSE
    (50) expression -> . NUMBER
    (51) expression -> . FLOAT
    (52) expression -> . STRING

    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    LPAREN          shift and go to state 26
    ID              shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32

    expression                     shift and go to state 105

state 102

    (23) function_def -> DEF ID LPAREN param_list RPAREN COLON statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . for_statement
    (7) statement -> . while_statement
    (8) statement -> . print_statement
    (9) statement -> . function_def
    (10) statement -> . function_call
    (11) statement -> . return_statement
    (12) assignment -> . ID ASSIGN expression
    (13) if_statement -> . IF condition COLON statement elif_list_opt ELSE statement
    (14) if_statement -> . IF condition COLON statement elif_list_opt
    (19) for_statement -> . FOR ID IN range statement
    (20) while_statement -> . WHILE condition statement
    (22) print_statement -> . PRINT LPAREN expression RPAREN
    (23) function_def -> . DEF ID LPAREN param_list RPAREN COLON statement_list
    (24) function_call -> . ID LPAREN arg_list RPAREN
    (25) return_statement -> . RETURN expression

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    $end            reduce using rule 23 (function_def -> DEF ID LPAREN param_list RPAREN COLON statement_list .)
    ELIF            reduce using rule 23 (function_def -> DEF ID LPAREN param_list RPAREN COLON statement_list .)
    ELSE            reduce using rule 23 (function_def -> DEF ID LPAREN param_list RPAREN COLON statement_list .)
    ID              shift and go to state 12
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 15
    PRINT           shift and go to state 16
    DEF             shift and go to state 17
    RETURN          shift and go to state 18

  ! ID              [ reduce using rule 23 (function_def -> DEF ID LPAREN param_list RPAREN COLON statement_list .) ]
  ! IF              [ reduce using rule 23 (function_def -> DEF ID LPAREN param_list RPAREN COLON statement_list .) ]
  ! FOR             [ reduce using rule 23 (function_def -> DEF ID LPAREN param_list RPAREN COLON statement_list .) ]
  ! WHILE           [ reduce using rule 23 (function_def -> DEF ID LPAREN param_list RPAREN COLON statement_list .) ]
  ! PRINT           [ reduce using rule 23 (function_def -> DEF ID LPAREN param_list RPAREN COLON statement_list .) ]
  ! DEF             [ reduce using rule 23 (function_def -> DEF ID LPAREN param_list RPAREN COLON statement_list .) ]
  ! RETURN          [ reduce using rule 23 (function_def -> DEF ID LPAREN param_list RPAREN COLON statement_list .) ]

    statement                      shift and go to state 19
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    for_statement                  shift and go to state 6
    while_statement                shift and go to state 7
    print_statement                shift and go to state 8
    function_def                   shift and go to state 9
    function_call                  shift and go to state 10
    return_statement               shift and go to state 11

state 103

    (17) elif_list -> elif_list ELIF condition COLON . statement
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . for_statement
    (7) statement -> . while_statement
    (8) statement -> . print_statement
    (9) statement -> . function_def
    (10) statement -> . function_call
    (11) statement -> . return_statement
    (12) assignment -> . ID ASSIGN expression
    (13) if_statement -> . IF condition COLON statement elif_list_opt ELSE statement
    (14) if_statement -> . IF condition COLON statement elif_list_opt
    (19) for_statement -> . FOR ID IN range statement
    (20) while_statement -> . WHILE condition statement
    (22) print_statement -> . PRINT LPAREN expression RPAREN
    (23) function_def -> . DEF ID LPAREN param_list RPAREN COLON statement_list
    (24) function_call -> . ID LPAREN arg_list RPAREN
    (25) return_statement -> . RETURN expression

    ID              shift and go to state 12
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 15
    PRINT           shift and go to state 16
    DEF             shift and go to state 17
    RETURN          shift and go to state 18

    statement                      shift and go to state 106
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    for_statement                  shift and go to state 6
    while_statement                shift and go to state 7
    print_statement                shift and go to state 8
    function_def                   shift and go to state 9
    function_call                  shift and go to state 10
    return_statement               shift and go to state 11

state 104

    (18) elif_list -> ELIF condition COLON statement .

    ID              reduce using rule 18 (elif_list -> ELIF condition COLON statement .)
    IF              reduce using rule 18 (elif_list -> ELIF condition COLON statement .)
    FOR             reduce using rule 18 (elif_list -> ELIF condition COLON statement .)
    WHILE           reduce using rule 18 (elif_list -> ELIF condition COLON statement .)
    PRINT           reduce using rule 18 (elif_list -> ELIF condition COLON statement .)
    DEF             reduce using rule 18 (elif_list -> ELIF condition COLON statement .)
    RETURN          reduce using rule 18 (elif_list -> ELIF condition COLON statement .)
    $end            reduce using rule 18 (elif_list -> ELIF condition COLON statement .)
    ELIF            reduce using rule 18 (elif_list -> ELIF condition COLON statement .)
    ELSE            reduce using rule 18 (elif_list -> ELIF condition COLON statement .)


state 105

    (21) range -> RANGE LPAREN expression COMMA expression . RPAREN
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . MULTIPLY expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . MODULO expression
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression

    RPAREN          shift and go to state 107
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    OR              shift and go to state 53
    AND             shift and go to state 54


state 106

    (17) elif_list -> elif_list ELIF condition COLON statement .

    ID              reduce using rule 17 (elif_list -> elif_list ELIF condition COLON statement .)
    IF              reduce using rule 17 (elif_list -> elif_list ELIF condition COLON statement .)
    FOR             reduce using rule 17 (elif_list -> elif_list ELIF condition COLON statement .)
    WHILE           reduce using rule 17 (elif_list -> elif_list ELIF condition COLON statement .)
    PRINT           reduce using rule 17 (elif_list -> elif_list ELIF condition COLON statement .)
    DEF             reduce using rule 17 (elif_list -> elif_list ELIF condition COLON statement .)
    RETURN          reduce using rule 17 (elif_list -> elif_list ELIF condition COLON statement .)
    $end            reduce using rule 17 (elif_list -> elif_list ELIF condition COLON statement .)
    ELIF            reduce using rule 17 (elif_list -> elif_list ELIF condition COLON statement .)
    ELSE            reduce using rule 17 (elif_list -> elif_list ELIF condition COLON statement .)


state 107

    (21) range -> RANGE LPAREN expression COMMA expression RPAREN .

    ID              reduce using rule 21 (range -> RANGE LPAREN expression COMMA expression RPAREN .)
    IF              reduce using rule 21 (range -> RANGE LPAREN expression COMMA expression RPAREN .)
    FOR             reduce using rule 21 (range -> RANGE LPAREN expression COMMA expression RPAREN .)
    WHILE           reduce using rule 21 (range -> RANGE LPAREN expression COMMA expression RPAREN .)
    PRINT           reduce using rule 21 (range -> RANGE LPAREN expression COMMA expression RPAREN .)
    DEF             reduce using rule 21 (range -> RANGE LPAREN expression COMMA expression RPAREN .)
    RETURN          reduce using rule 21 (range -> RANGE LPAREN expression COMMA expression RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELIF in state 64 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 84 resolved as shift
WARNING: shift/reduce conflict for ELIF in state 85 resolved as shift
WARNING: shift/reduce conflict for ID in state 102 resolved as shift
WARNING: shift/reduce conflict for IF in state 102 resolved as shift
WARNING: shift/reduce conflict for FOR in state 102 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 102 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 102 resolved as shift
WARNING: shift/reduce conflict for DEF in state 102 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 102 resolved as shift
