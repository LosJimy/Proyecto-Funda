Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     expression -> LPAREN expression RPAREN
Rule 3     expression -> NUMBER
Rule 4     expression -> FLOAT
Rule 5     expression -> MINUS expression
Rule 6     expression -> expression PLUS expression
Rule 7     expression -> expression MINUS expression
Rule 8     expression -> expression MULTIPLY expression
Rule 9     expression -> expression DIVIDE expression
Rule 10    expression -> STRING
Rule 11    statement -> END

Terminals, with rules where they appear

DIVIDE               : 9
END                  : 11
FLOAT                : 4
LPAREN               : 2
MINUS                : 5 7
MULTIPLY             : 8
NUMBER               : 3
PLUS                 : 6
RPAREN               : 2
STRING               : 10
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 5 6 6 7 7 8 8 9 9
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (11) statement -> . END
    (2) expression -> . LPAREN expression RPAREN
    (3) expression -> . NUMBER
    (4) expression -> . FLOAT
    (5) expression -> . MINUS expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression MULTIPLY expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . STRING

    END             shift and go to state 3
    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 5
    FLOAT           shift and go to state 6
    MINUS           shift and go to state 7
    STRING          shift and go to state 8

    statement                      shift and go to state 1
    expression                     shift and go to state 2

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . MULTIPLY expression
    (9) expression -> expression . DIVIDE expression

    $end            reduce using rule 1 (statement -> expression .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12


state 3

    (11) statement -> END .

    $end            reduce using rule 11 (statement -> END .)


state 4

    (2) expression -> LPAREN . expression RPAREN
    (2) expression -> . LPAREN expression RPAREN
    (3) expression -> . NUMBER
    (4) expression -> . FLOAT
    (5) expression -> . MINUS expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression MULTIPLY expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . STRING

    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 5
    FLOAT           shift and go to state 6
    MINUS           shift and go to state 7
    STRING          shift and go to state 8

    expression                     shift and go to state 13

state 5

    (3) expression -> NUMBER .

    PLUS            reduce using rule 3 (expression -> NUMBER .)
    MINUS           reduce using rule 3 (expression -> NUMBER .)
    MULTIPLY        reduce using rule 3 (expression -> NUMBER .)
    DIVIDE          reduce using rule 3 (expression -> NUMBER .)
    $end            reduce using rule 3 (expression -> NUMBER .)
    RPAREN          reduce using rule 3 (expression -> NUMBER .)


state 6

    (4) expression -> FLOAT .

    PLUS            reduce using rule 4 (expression -> FLOAT .)
    MINUS           reduce using rule 4 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 4 (expression -> FLOAT .)
    DIVIDE          reduce using rule 4 (expression -> FLOAT .)
    $end            reduce using rule 4 (expression -> FLOAT .)
    RPAREN          reduce using rule 4 (expression -> FLOAT .)


state 7

    (5) expression -> MINUS . expression
    (2) expression -> . LPAREN expression RPAREN
    (3) expression -> . NUMBER
    (4) expression -> . FLOAT
    (5) expression -> . MINUS expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression MULTIPLY expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . STRING

    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 5
    FLOAT           shift and go to state 6
    MINUS           shift and go to state 7
    STRING          shift and go to state 8

    expression                     shift and go to state 14

state 8

    (10) expression -> STRING .

    PLUS            reduce using rule 10 (expression -> STRING .)
    MINUS           reduce using rule 10 (expression -> STRING .)
    MULTIPLY        reduce using rule 10 (expression -> STRING .)
    DIVIDE          reduce using rule 10 (expression -> STRING .)
    $end            reduce using rule 10 (expression -> STRING .)
    RPAREN          reduce using rule 10 (expression -> STRING .)


state 9

    (6) expression -> expression PLUS . expression
    (2) expression -> . LPAREN expression RPAREN
    (3) expression -> . NUMBER
    (4) expression -> . FLOAT
    (5) expression -> . MINUS expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression MULTIPLY expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . STRING

    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 5
    FLOAT           shift and go to state 6
    MINUS           shift and go to state 7
    STRING          shift and go to state 8

    expression                     shift and go to state 15

state 10

    (7) expression -> expression MINUS . expression
    (2) expression -> . LPAREN expression RPAREN
    (3) expression -> . NUMBER
    (4) expression -> . FLOAT
    (5) expression -> . MINUS expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression MULTIPLY expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . STRING

    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 5
    FLOAT           shift and go to state 6
    MINUS           shift and go to state 7
    STRING          shift and go to state 8

    expression                     shift and go to state 16

state 11

    (8) expression -> expression MULTIPLY . expression
    (2) expression -> . LPAREN expression RPAREN
    (3) expression -> . NUMBER
    (4) expression -> . FLOAT
    (5) expression -> . MINUS expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression MULTIPLY expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . STRING

    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 5
    FLOAT           shift and go to state 6
    MINUS           shift and go to state 7
    STRING          shift and go to state 8

    expression                     shift and go to state 17

state 12

    (9) expression -> expression DIVIDE . expression
    (2) expression -> . LPAREN expression RPAREN
    (3) expression -> . NUMBER
    (4) expression -> . FLOAT
    (5) expression -> . MINUS expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression MULTIPLY expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . STRING

    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 5
    FLOAT           shift and go to state 6
    MINUS           shift and go to state 7
    STRING          shift and go to state 8

    expression                     shift and go to state 18

state 13

    (2) expression -> LPAREN expression . RPAREN
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . MULTIPLY expression
    (9) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 19
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12


state 14

    (5) expression -> MINUS expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . MULTIPLY expression
    (9) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 5 (expression -> MINUS expression .)
    MINUS           reduce using rule 5 (expression -> MINUS expression .)
    $end            reduce using rule 5 (expression -> MINUS expression .)
    RPAREN          reduce using rule 5 (expression -> MINUS expression .)
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12

  ! MULTIPLY        [ reduce using rule 5 (expression -> MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 5 (expression -> MINUS expression .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]


state 15

    (6) expression -> expression PLUS expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . MULTIPLY expression
    (9) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 6 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 6 (expression -> expression PLUS expression .)
    $end            reduce using rule 6 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 6 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12

  ! MULTIPLY        [ reduce using rule 6 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 6 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]


state 16

    (7) expression -> expression MINUS expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . MULTIPLY expression
    (9) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 7 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 7 (expression -> expression MINUS expression .)
    $end            reduce using rule 7 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 7 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12

  ! MULTIPLY        [ reduce using rule 7 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 7 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]


state 17

    (8) expression -> expression MULTIPLY expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . MULTIPLY expression
    (9) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 8 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 8 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 8 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 8 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 8 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 8 (expression -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! MULTIPLY        [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]


state 18

    (9) expression -> expression DIVIDE expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . MULTIPLY expression
    (9) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 9 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 9 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 9 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 9 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 9 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 9 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! MULTIPLY        [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]


state 19

    (2) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 2 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 2 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 2 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 2 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 2 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 2 (expression -> LPAREN expression RPAREN .)

