Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement_list
Rule 1     statement_list -> statement_list statement
Rule 2     statement_list -> statement
Rule 3     statement -> expression
Rule 4     statement -> ID EQUALS expression
Rule 5     statement -> ID LPAREN ID RPAREN
Rule 6     statement -> IF expression LBRACE statement_list RBRACE
Rule 7     statement -> IF expression LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
Rule 8     statement -> END
Rule 9     expression -> LPAREN expression RPAREN
Rule 10    expression -> NUMBER
Rule 11    expression -> FLOAT
Rule 12    expression -> ID
Rule 13    expression -> MINUS expression
Rule 14    expression -> expression PLUS expression
Rule 15    expression -> expression MINUS expression
Rule 16    expression -> expression MULTIPLY expression
Rule 17    expression -> expression DIVIDE expression
Rule 18    expression -> STRING

Terminals, with rules where they appear

DIVIDE               : 17
ELSE                 : 7
END                  : 8
EQUALS               : 4
FLOAT                : 11
ID                   : 4 5 5 12
IF                   : 6 7
LBRACE               : 6 7 7
LPAREN               : 5 9
MINUS                : 13 15
MULTIPLY             : 16
NUMBER               : 10
PLUS                 : 14
RBRACE               : 6 7 7
RPAREN               : 5 9
STRING               : 18
error                : 

Nonterminals, with rules where they appear

expression           : 3 4 6 7 9 13 14 14 15 15 16 16 17 17
statement            : 1 2
statement_list       : 1 6 7 7 0

Parsing method: LALR

state 0

    (0) S' -> . statement_list
    (1) statement_list -> . statement_list statement
    (2) statement_list -> . statement
    (3) statement -> . expression
    (4) statement -> . ID EQUALS expression
    (5) statement -> . ID LPAREN ID RPAREN
    (6) statement -> . IF expression LBRACE statement_list RBRACE
    (7) statement -> . IF expression LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (8) statement -> . END
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . FLOAT
    (12) expression -> . ID
    (13) expression -> . MINUS expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . STRING

    ID              shift and go to state 4
    IF              shift and go to state 6
    END             shift and go to state 7
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 8
    FLOAT           shift and go to state 9
    MINUS           shift and go to state 10
    STRING          shift and go to state 11

    statement_list                 shift and go to state 1
    statement                      shift and go to state 2
    expression                     shift and go to state 3

state 1

    (0) S' -> statement_list .
    (1) statement_list -> statement_list . statement
    (3) statement -> . expression
    (4) statement -> . ID EQUALS expression
    (5) statement -> . ID LPAREN ID RPAREN
    (6) statement -> . IF expression LBRACE statement_list RBRACE
    (7) statement -> . IF expression LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (8) statement -> . END
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . FLOAT
    (12) expression -> . ID
    (13) expression -> . MINUS expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . STRING

    ID              shift and go to state 4
    IF              shift and go to state 6
    END             shift and go to state 7
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 8
    FLOAT           shift and go to state 9
    MINUS           shift and go to state 10
    STRING          shift and go to state 11

    statement                      shift and go to state 12
    expression                     shift and go to state 3

state 2

    (2) statement_list -> statement .

    ID              reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    END             reduce using rule 2 (statement_list -> statement .)
    LPAREN          reduce using rule 2 (statement_list -> statement .)
    NUMBER          reduce using rule 2 (statement_list -> statement .)
    FLOAT           reduce using rule 2 (statement_list -> statement .)
    MINUS           reduce using rule 2 (statement_list -> statement .)
    STRING          reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)
    RBRACE          reduce using rule 2 (statement_list -> statement .)


state 3

    (3) statement -> expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MULTIPLY expression
    (17) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for MINUS resolved as shift
    ID              reduce using rule 3 (statement -> expression .)
    IF              reduce using rule 3 (statement -> expression .)
    END             reduce using rule 3 (statement -> expression .)
    LPAREN          reduce using rule 3 (statement -> expression .)
    NUMBER          reduce using rule 3 (statement -> expression .)
    FLOAT           reduce using rule 3 (statement -> expression .)
    STRING          reduce using rule 3 (statement -> expression .)
    $end            reduce using rule 3 (statement -> expression .)
    RBRACE          reduce using rule 3 (statement -> expression .)
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    MULTIPLY        shift and go to state 15
    DIVIDE          shift and go to state 16

  ! MINUS           [ reduce using rule 3 (statement -> expression .) ]


state 4

    (4) statement -> ID . EQUALS expression
    (5) statement -> ID . LPAREN ID RPAREN
    (12) expression -> ID .

  ! shift/reduce conflict for LPAREN resolved as shift
    EQUALS          shift and go to state 17
    LPAREN          shift and go to state 18
    PLUS            reduce using rule 12 (expression -> ID .)
    MINUS           reduce using rule 12 (expression -> ID .)
    MULTIPLY        reduce using rule 12 (expression -> ID .)
    DIVIDE          reduce using rule 12 (expression -> ID .)
    ID              reduce using rule 12 (expression -> ID .)
    IF              reduce using rule 12 (expression -> ID .)
    END             reduce using rule 12 (expression -> ID .)
    NUMBER          reduce using rule 12 (expression -> ID .)
    FLOAT           reduce using rule 12 (expression -> ID .)
    STRING          reduce using rule 12 (expression -> ID .)
    $end            reduce using rule 12 (expression -> ID .)
    RBRACE          reduce using rule 12 (expression -> ID .)

  ! LPAREN          [ reduce using rule 12 (expression -> ID .) ]


state 5

    (9) expression -> LPAREN . expression RPAREN
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . FLOAT
    (12) expression -> . ID
    (13) expression -> . MINUS expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . STRING

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 8
    FLOAT           shift and go to state 9
    ID              shift and go to state 20
    MINUS           shift and go to state 10
    STRING          shift and go to state 11

    expression                     shift and go to state 19

state 6

    (6) statement -> IF . expression LBRACE statement_list RBRACE
    (7) statement -> IF . expression LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . FLOAT
    (12) expression -> . ID
    (13) expression -> . MINUS expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . STRING

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 8
    FLOAT           shift and go to state 9
    ID              shift and go to state 20
    MINUS           shift and go to state 10
    STRING          shift and go to state 11

    expression                     shift and go to state 21

state 7

    (8) statement -> END .

    ID              reduce using rule 8 (statement -> END .)
    IF              reduce using rule 8 (statement -> END .)
    END             reduce using rule 8 (statement -> END .)
    LPAREN          reduce using rule 8 (statement -> END .)
    NUMBER          reduce using rule 8 (statement -> END .)
    FLOAT           reduce using rule 8 (statement -> END .)
    MINUS           reduce using rule 8 (statement -> END .)
    STRING          reduce using rule 8 (statement -> END .)
    $end            reduce using rule 8 (statement -> END .)
    RBRACE          reduce using rule 8 (statement -> END .)


state 8

    (10) expression -> NUMBER .

    PLUS            reduce using rule 10 (expression -> NUMBER .)
    MINUS           reduce using rule 10 (expression -> NUMBER .)
    MULTIPLY        reduce using rule 10 (expression -> NUMBER .)
    DIVIDE          reduce using rule 10 (expression -> NUMBER .)
    ID              reduce using rule 10 (expression -> NUMBER .)
    IF              reduce using rule 10 (expression -> NUMBER .)
    END             reduce using rule 10 (expression -> NUMBER .)
    LPAREN          reduce using rule 10 (expression -> NUMBER .)
    NUMBER          reduce using rule 10 (expression -> NUMBER .)
    FLOAT           reduce using rule 10 (expression -> NUMBER .)
    STRING          reduce using rule 10 (expression -> NUMBER .)
    $end            reduce using rule 10 (expression -> NUMBER .)
    RPAREN          reduce using rule 10 (expression -> NUMBER .)
    LBRACE          reduce using rule 10 (expression -> NUMBER .)
    RBRACE          reduce using rule 10 (expression -> NUMBER .)


state 9

    (11) expression -> FLOAT .

    PLUS            reduce using rule 11 (expression -> FLOAT .)
    MINUS           reduce using rule 11 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 11 (expression -> FLOAT .)
    DIVIDE          reduce using rule 11 (expression -> FLOAT .)
    ID              reduce using rule 11 (expression -> FLOAT .)
    IF              reduce using rule 11 (expression -> FLOAT .)
    END             reduce using rule 11 (expression -> FLOAT .)
    LPAREN          reduce using rule 11 (expression -> FLOAT .)
    NUMBER          reduce using rule 11 (expression -> FLOAT .)
    FLOAT           reduce using rule 11 (expression -> FLOAT .)
    STRING          reduce using rule 11 (expression -> FLOAT .)
    $end            reduce using rule 11 (expression -> FLOAT .)
    RPAREN          reduce using rule 11 (expression -> FLOAT .)
    LBRACE          reduce using rule 11 (expression -> FLOAT .)
    RBRACE          reduce using rule 11 (expression -> FLOAT .)


state 10

    (13) expression -> MINUS . expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . FLOAT
    (12) expression -> . ID
    (13) expression -> . MINUS expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . STRING

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 8
    FLOAT           shift and go to state 9
    ID              shift and go to state 20
    MINUS           shift and go to state 10
    STRING          shift and go to state 11

    expression                     shift and go to state 22

state 11

    (18) expression -> STRING .

    PLUS            reduce using rule 18 (expression -> STRING .)
    MINUS           reduce using rule 18 (expression -> STRING .)
    MULTIPLY        reduce using rule 18 (expression -> STRING .)
    DIVIDE          reduce using rule 18 (expression -> STRING .)
    ID              reduce using rule 18 (expression -> STRING .)
    IF              reduce using rule 18 (expression -> STRING .)
    END             reduce using rule 18 (expression -> STRING .)
    LPAREN          reduce using rule 18 (expression -> STRING .)
    NUMBER          reduce using rule 18 (expression -> STRING .)
    FLOAT           reduce using rule 18 (expression -> STRING .)
    STRING          reduce using rule 18 (expression -> STRING .)
    $end            reduce using rule 18 (expression -> STRING .)
    RPAREN          reduce using rule 18 (expression -> STRING .)
    LBRACE          reduce using rule 18 (expression -> STRING .)
    RBRACE          reduce using rule 18 (expression -> STRING .)


state 12

    (1) statement_list -> statement_list statement .

    ID              reduce using rule 1 (statement_list -> statement_list statement .)
    IF              reduce using rule 1 (statement_list -> statement_list statement .)
    END             reduce using rule 1 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 1 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 1 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 1 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 1 (statement_list -> statement_list statement .)
    STRING          reduce using rule 1 (statement_list -> statement_list statement .)
    $end            reduce using rule 1 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 1 (statement_list -> statement_list statement .)


state 13

    (14) expression -> expression PLUS . expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . FLOAT
    (12) expression -> . ID
    (13) expression -> . MINUS expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . STRING

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 8
    FLOAT           shift and go to state 9
    ID              shift and go to state 20
    MINUS           shift and go to state 10
    STRING          shift and go to state 11

    expression                     shift and go to state 23

state 14

    (15) expression -> expression MINUS . expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . FLOAT
    (12) expression -> . ID
    (13) expression -> . MINUS expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . STRING

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 8
    FLOAT           shift and go to state 9
    ID              shift and go to state 20
    MINUS           shift and go to state 10
    STRING          shift and go to state 11

    expression                     shift and go to state 24

state 15

    (16) expression -> expression MULTIPLY . expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . FLOAT
    (12) expression -> . ID
    (13) expression -> . MINUS expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . STRING

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 8
    FLOAT           shift and go to state 9
    ID              shift and go to state 20
    MINUS           shift and go to state 10
    STRING          shift and go to state 11

    expression                     shift and go to state 25

state 16

    (17) expression -> expression DIVIDE . expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . FLOAT
    (12) expression -> . ID
    (13) expression -> . MINUS expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . STRING

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 8
    FLOAT           shift and go to state 9
    ID              shift and go to state 20
    MINUS           shift and go to state 10
    STRING          shift and go to state 11

    expression                     shift and go to state 26

state 17

    (4) statement -> ID EQUALS . expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . FLOAT
    (12) expression -> . ID
    (13) expression -> . MINUS expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . STRING

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 8
    FLOAT           shift and go to state 9
    ID              shift and go to state 20
    MINUS           shift and go to state 10
    STRING          shift and go to state 11

    expression                     shift and go to state 27

state 18

    (5) statement -> ID LPAREN . ID RPAREN

    ID              shift and go to state 28


state 19

    (9) expression -> LPAREN expression . RPAREN
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MULTIPLY expression
    (17) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 29
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    MULTIPLY        shift and go to state 15
    DIVIDE          shift and go to state 16


state 20

    (12) expression -> ID .

    RPAREN          reduce using rule 12 (expression -> ID .)
    PLUS            reduce using rule 12 (expression -> ID .)
    MINUS           reduce using rule 12 (expression -> ID .)
    MULTIPLY        reduce using rule 12 (expression -> ID .)
    DIVIDE          reduce using rule 12 (expression -> ID .)
    LBRACE          reduce using rule 12 (expression -> ID .)
    ID              reduce using rule 12 (expression -> ID .)
    IF              reduce using rule 12 (expression -> ID .)
    END             reduce using rule 12 (expression -> ID .)
    LPAREN          reduce using rule 12 (expression -> ID .)
    NUMBER          reduce using rule 12 (expression -> ID .)
    FLOAT           reduce using rule 12 (expression -> ID .)
    STRING          reduce using rule 12 (expression -> ID .)
    $end            reduce using rule 12 (expression -> ID .)
    RBRACE          reduce using rule 12 (expression -> ID .)


state 21

    (6) statement -> IF expression . LBRACE statement_list RBRACE
    (7) statement -> IF expression . LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MULTIPLY expression
    (17) expression -> expression . DIVIDE expression

    LBRACE          shift and go to state 30
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    MULTIPLY        shift and go to state 15
    DIVIDE          shift and go to state 16


state 22

    (13) expression -> MINUS expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MULTIPLY expression
    (17) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 13 (expression -> MINUS expression .)
    MINUS           reduce using rule 13 (expression -> MINUS expression .)
    ID              reduce using rule 13 (expression -> MINUS expression .)
    IF              reduce using rule 13 (expression -> MINUS expression .)
    END             reduce using rule 13 (expression -> MINUS expression .)
    LPAREN          reduce using rule 13 (expression -> MINUS expression .)
    NUMBER          reduce using rule 13 (expression -> MINUS expression .)
    FLOAT           reduce using rule 13 (expression -> MINUS expression .)
    STRING          reduce using rule 13 (expression -> MINUS expression .)
    $end            reduce using rule 13 (expression -> MINUS expression .)
    RPAREN          reduce using rule 13 (expression -> MINUS expression .)
    LBRACE          reduce using rule 13 (expression -> MINUS expression .)
    RBRACE          reduce using rule 13 (expression -> MINUS expression .)
    MULTIPLY        shift and go to state 15
    DIVIDE          shift and go to state 16

  ! MULTIPLY        [ reduce using rule 13 (expression -> MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 13 (expression -> MINUS expression .) ]
  ! PLUS            [ shift and go to state 13 ]
  ! MINUS           [ shift and go to state 14 ]


state 23

    (14) expression -> expression PLUS expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MULTIPLY expression
    (17) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 14 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 14 (expression -> expression PLUS expression .)
    ID              reduce using rule 14 (expression -> expression PLUS expression .)
    IF              reduce using rule 14 (expression -> expression PLUS expression .)
    END             reduce using rule 14 (expression -> expression PLUS expression .)
    LPAREN          reduce using rule 14 (expression -> expression PLUS expression .)
    NUMBER          reduce using rule 14 (expression -> expression PLUS expression .)
    FLOAT           reduce using rule 14 (expression -> expression PLUS expression .)
    STRING          reduce using rule 14 (expression -> expression PLUS expression .)
    $end            reduce using rule 14 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 14 (expression -> expression PLUS expression .)
    LBRACE          reduce using rule 14 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 14 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 15
    DIVIDE          shift and go to state 16

  ! MULTIPLY        [ reduce using rule 14 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 14 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 13 ]
  ! MINUS           [ shift and go to state 14 ]


state 24

    (15) expression -> expression MINUS expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MULTIPLY expression
    (17) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 15 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 15 (expression -> expression MINUS expression .)
    ID              reduce using rule 15 (expression -> expression MINUS expression .)
    IF              reduce using rule 15 (expression -> expression MINUS expression .)
    END             reduce using rule 15 (expression -> expression MINUS expression .)
    LPAREN          reduce using rule 15 (expression -> expression MINUS expression .)
    NUMBER          reduce using rule 15 (expression -> expression MINUS expression .)
    FLOAT           reduce using rule 15 (expression -> expression MINUS expression .)
    STRING          reduce using rule 15 (expression -> expression MINUS expression .)
    $end            reduce using rule 15 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 15 (expression -> expression MINUS expression .)
    LBRACE          reduce using rule 15 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 15 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 15
    DIVIDE          shift and go to state 16

  ! MULTIPLY        [ reduce using rule 15 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 15 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 13 ]
  ! MINUS           [ shift and go to state 14 ]


state 25

    (16) expression -> expression MULTIPLY expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MULTIPLY expression
    (17) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 16 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 16 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 16 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 16 (expression -> expression MULTIPLY expression .)
    ID              reduce using rule 16 (expression -> expression MULTIPLY expression .)
    IF              reduce using rule 16 (expression -> expression MULTIPLY expression .)
    END             reduce using rule 16 (expression -> expression MULTIPLY expression .)
    LPAREN          reduce using rule 16 (expression -> expression MULTIPLY expression .)
    NUMBER          reduce using rule 16 (expression -> expression MULTIPLY expression .)
    FLOAT           reduce using rule 16 (expression -> expression MULTIPLY expression .)
    STRING          reduce using rule 16 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 16 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 16 (expression -> expression MULTIPLY expression .)
    LBRACE          reduce using rule 16 (expression -> expression MULTIPLY expression .)
    RBRACE          reduce using rule 16 (expression -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 13 ]
  ! MINUS           [ shift and go to state 14 ]
  ! MULTIPLY        [ shift and go to state 15 ]
  ! DIVIDE          [ shift and go to state 16 ]


state 26

    (17) expression -> expression DIVIDE expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MULTIPLY expression
    (17) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 17 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 17 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 17 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 17 (expression -> expression DIVIDE expression .)
    ID              reduce using rule 17 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 17 (expression -> expression DIVIDE expression .)
    END             reduce using rule 17 (expression -> expression DIVIDE expression .)
    LPAREN          reduce using rule 17 (expression -> expression DIVIDE expression .)
    NUMBER          reduce using rule 17 (expression -> expression DIVIDE expression .)
    FLOAT           reduce using rule 17 (expression -> expression DIVIDE expression .)
    STRING          reduce using rule 17 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 17 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 17 (expression -> expression DIVIDE expression .)
    LBRACE          reduce using rule 17 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 17 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 13 ]
  ! MINUS           [ shift and go to state 14 ]
  ! MULTIPLY        [ shift and go to state 15 ]
  ! DIVIDE          [ shift and go to state 16 ]


state 27

    (4) statement -> ID EQUALS expression .
    (14) expression -> expression . PLUS expression
    (15) expression -> expression . MINUS expression
    (16) expression -> expression . MULTIPLY expression
    (17) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for MINUS resolved as shift
    ID              reduce using rule 4 (statement -> ID EQUALS expression .)
    IF              reduce using rule 4 (statement -> ID EQUALS expression .)
    END             reduce using rule 4 (statement -> ID EQUALS expression .)
    LPAREN          reduce using rule 4 (statement -> ID EQUALS expression .)
    NUMBER          reduce using rule 4 (statement -> ID EQUALS expression .)
    FLOAT           reduce using rule 4 (statement -> ID EQUALS expression .)
    STRING          reduce using rule 4 (statement -> ID EQUALS expression .)
    $end            reduce using rule 4 (statement -> ID EQUALS expression .)
    RBRACE          reduce using rule 4 (statement -> ID EQUALS expression .)
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    MULTIPLY        shift and go to state 15
    DIVIDE          shift and go to state 16

  ! MINUS           [ reduce using rule 4 (statement -> ID EQUALS expression .) ]


state 28

    (5) statement -> ID LPAREN ID . RPAREN

    RPAREN          shift and go to state 31


state 29

    (9) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    END             reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    STRING          reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 9 (expression -> LPAREN expression RPAREN .)


state 30

    (6) statement -> IF expression LBRACE . statement_list RBRACE
    (7) statement -> IF expression LBRACE . statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (1) statement_list -> . statement_list statement
    (2) statement_list -> . statement
    (3) statement -> . expression
    (4) statement -> . ID EQUALS expression
    (5) statement -> . ID LPAREN ID RPAREN
    (6) statement -> . IF expression LBRACE statement_list RBRACE
    (7) statement -> . IF expression LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (8) statement -> . END
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . FLOAT
    (12) expression -> . ID
    (13) expression -> . MINUS expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . STRING

    ID              shift and go to state 4
    IF              shift and go to state 6
    END             shift and go to state 7
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 8
    FLOAT           shift and go to state 9
    MINUS           shift and go to state 10
    STRING          shift and go to state 11

    expression                     shift and go to state 3
    statement_list                 shift and go to state 32
    statement                      shift and go to state 2

state 31

    (5) statement -> ID LPAREN ID RPAREN .

    ID              reduce using rule 5 (statement -> ID LPAREN ID RPAREN .)
    IF              reduce using rule 5 (statement -> ID LPAREN ID RPAREN .)
    END             reduce using rule 5 (statement -> ID LPAREN ID RPAREN .)
    LPAREN          reduce using rule 5 (statement -> ID LPAREN ID RPAREN .)
    NUMBER          reduce using rule 5 (statement -> ID LPAREN ID RPAREN .)
    FLOAT           reduce using rule 5 (statement -> ID LPAREN ID RPAREN .)
    MINUS           reduce using rule 5 (statement -> ID LPAREN ID RPAREN .)
    STRING          reduce using rule 5 (statement -> ID LPAREN ID RPAREN .)
    $end            reduce using rule 5 (statement -> ID LPAREN ID RPAREN .)
    RBRACE          reduce using rule 5 (statement -> ID LPAREN ID RPAREN .)


state 32

    (6) statement -> IF expression LBRACE statement_list . RBRACE
    (7) statement -> IF expression LBRACE statement_list . RBRACE ELSE LBRACE statement_list RBRACE
    (1) statement_list -> statement_list . statement
    (3) statement -> . expression
    (4) statement -> . ID EQUALS expression
    (5) statement -> . ID LPAREN ID RPAREN
    (6) statement -> . IF expression LBRACE statement_list RBRACE
    (7) statement -> . IF expression LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (8) statement -> . END
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . FLOAT
    (12) expression -> . ID
    (13) expression -> . MINUS expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . STRING

    RBRACE          shift and go to state 33
    ID              shift and go to state 4
    IF              shift and go to state 6
    END             shift and go to state 7
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 8
    FLOAT           shift and go to state 9
    MINUS           shift and go to state 10
    STRING          shift and go to state 11

    expression                     shift and go to state 3
    statement                      shift and go to state 12

state 33

    (6) statement -> IF expression LBRACE statement_list RBRACE .
    (7) statement -> IF expression LBRACE statement_list RBRACE . ELSE LBRACE statement_list RBRACE

    ID              reduce using rule 6 (statement -> IF expression LBRACE statement_list RBRACE .)
    IF              reduce using rule 6 (statement -> IF expression LBRACE statement_list RBRACE .)
    END             reduce using rule 6 (statement -> IF expression LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 6 (statement -> IF expression LBRACE statement_list RBRACE .)
    NUMBER          reduce using rule 6 (statement -> IF expression LBRACE statement_list RBRACE .)
    FLOAT           reduce using rule 6 (statement -> IF expression LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 6 (statement -> IF expression LBRACE statement_list RBRACE .)
    STRING          reduce using rule 6 (statement -> IF expression LBRACE statement_list RBRACE .)
    $end            reduce using rule 6 (statement -> IF expression LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 6 (statement -> IF expression LBRACE statement_list RBRACE .)
    ELSE            shift and go to state 34


state 34

    (7) statement -> IF expression LBRACE statement_list RBRACE ELSE . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 35


state 35

    (7) statement -> IF expression LBRACE statement_list RBRACE ELSE LBRACE . statement_list RBRACE
    (1) statement_list -> . statement_list statement
    (2) statement_list -> . statement
    (3) statement -> . expression
    (4) statement -> . ID EQUALS expression
    (5) statement -> . ID LPAREN ID RPAREN
    (6) statement -> . IF expression LBRACE statement_list RBRACE
    (7) statement -> . IF expression LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (8) statement -> . END
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . FLOAT
    (12) expression -> . ID
    (13) expression -> . MINUS expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . STRING

    ID              shift and go to state 4
    IF              shift and go to state 6
    END             shift and go to state 7
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 8
    FLOAT           shift and go to state 9
    MINUS           shift and go to state 10
    STRING          shift and go to state 11

    expression                     shift and go to state 3
    statement_list                 shift and go to state 36
    statement                      shift and go to state 2

state 36

    (7) statement -> IF expression LBRACE statement_list RBRACE ELSE LBRACE statement_list . RBRACE
    (1) statement_list -> statement_list . statement
    (3) statement -> . expression
    (4) statement -> . ID EQUALS expression
    (5) statement -> . ID LPAREN ID RPAREN
    (6) statement -> . IF expression LBRACE statement_list RBRACE
    (7) statement -> . IF expression LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (8) statement -> . END
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . NUMBER
    (11) expression -> . FLOAT
    (12) expression -> . ID
    (13) expression -> . MINUS expression
    (14) expression -> . expression PLUS expression
    (15) expression -> . expression MINUS expression
    (16) expression -> . expression MULTIPLY expression
    (17) expression -> . expression DIVIDE expression
    (18) expression -> . STRING

    RBRACE          shift and go to state 37
    ID              shift and go to state 4
    IF              shift and go to state 6
    END             shift and go to state 7
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 8
    FLOAT           shift and go to state 9
    MINUS           shift and go to state 10
    STRING          shift and go to state 11

    expression                     shift and go to state 3
    statement                      shift and go to state 12

state 37

    (7) statement -> IF expression LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .

    ID              reduce using rule 7 (statement -> IF expression LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    IF              reduce using rule 7 (statement -> IF expression LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    END             reduce using rule 7 (statement -> IF expression LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 7 (statement -> IF expression LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    NUMBER          reduce using rule 7 (statement -> IF expression LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    FLOAT           reduce using rule 7 (statement -> IF expression LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 7 (statement -> IF expression LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    STRING          reduce using rule 7 (statement -> IF expression LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    $end            reduce using rule 7 (statement -> IF expression LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 7 (statement -> IF expression LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MINUS in state 3 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 4 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 27 resolved as shift
